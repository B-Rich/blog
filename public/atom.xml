<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Nicolás Hock Isaza]]></title>
  <link href="http://blog.nhocki.com/atom.xml" rel="self"/>
  <link href="http://blog.nhocki.com/"/>
  <updated>2012-07-11T00:20:16-04:00</updated>
  <id>http://blog.nhocki.com/</id>
  <author>
    <name><![CDATA[Nicolás Hock Isaza]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Use the community for something more]]></title>
    <link href="http://blog.nhocki.com/2012/07/10/use-the-community-for-something-more/"/>
    <updated>2012-07-10T23:25:00-04:00</updated>
    <id>http://blog.nhocki.com/2012/07/10/use-the-community-for-something-more</id>
    <content type="html"><![CDATA[<p>For a while, this idea has been wondering around in my head.</p>

<p>I would love to have some web-development community in Medellín, but I would
like it to be &#8220;something more&#8221;. I love the idea of learning from others,
teaching and getting people involved. I know there are
<a href="http://coffeegrid.org/">more people</a> that are looking forward for this.</p>

<p>Sadly, we don&#8217;t have a community like the one in Boston. It&#8217;s amazing how
many events there are here. <a href="http://bostonrb.org/">Boston.rb</a> meets up to
3 times a month! It&#8217;s just crazy! You just need to go to
<a href="http://www.meetup.com/">Meetup</a> to find an event of your interest! All
filled with people eager to share and help!</p>

<p>But I would love to put all that lovin&#8217; to some &#8220;charity&#8221; work. Get real
projects for people that need it. <strong>It doesn&#8217;t have to be 100% free</strong>,
but not charging nearly as much as you would normally do it!</p>

<p>For example, I know a <a href="http://www.bomberosenvigado.org/"><strong>Volonteer</strong> Fire Fighter Department</a>
that needs to build a simple learning system to distribute knowledge because
<strong>ignorance is taking a lot of lives</strong> (from firefighters and people they&#8217;re
trying to save). Hell, they also need a new website!</p>

<p>I also know about a guy that needs a website for an organization that helps
small kids with cancer in Africa.</p>

<p>All these projects could use the expertise of &#8220;old&#8221; developers and enthusiasm
from the ones that are just learning. I&#8217;ve found that working on a real
project is way better than learning on your backyard. So why not take something
that could use more man-power and pair program on these websites?</p>

<p>So, what do you think? Would something like this work? Would people be
interested? Those organizations could, for example, sponsor the meetings
giving some beer and food! Developing companies could also sponsor this
and get some mention on the created websites. I know
<a href="http://www.zinergia.co">we</a> would do it!</p>

<p>I can&#8217;t do it right now. I&#8217;m 2.5K miles away! And I don&#8217;t think it&#8217;s an
easy thing to organize, but I would like to know if people is actually
interested before I throw myself sending emails and talking to people,
so please contact me if you are, either by leaving a comment or
<a href="http://twitter.com/nhocki">pinging me on Twitter(@nhocki)</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Fix Xcode Path]]></title>
    <link href="http://blog.nhocki.com/2012/05/09/fix-xcode-path/"/>
    <updated>2012-05-09T19:38:00-04:00</updated>
    <id>http://blog.nhocki.com/2012/05/09/fix-xcode-path</id>
    <content type="html"><![CDATA[<p>I updated my Xcode version this week and to my surprise they moved it from <code>/Developer</code> to <code>/Applications/Xcode</code>, the problem is that now all the developer tools went missing. Here&#8217;s the easy solution for this:</p>

<p><code>sudo /usr/bin/xcode-select -switch /Applications/Xcode.app/Contents/Developer/</code></p>

<p>That&#8217;s it. Just let Xcode know where to look for the developer tools again.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Mixing Presenters and Helpers]]></title>
    <link href="http://blog.nhocki.com/2012/05/08/mixing-presenters-and-helpers/"/>
    <updated>2012-05-08T18:28:00-04:00</updated>
    <id>http://blog.nhocki.com/2012/05/08/mixing-presenters-and-helpers</id>
    <content type="html"><![CDATA[<p>I just finished <a href="http://pragprog.com/book/warv/the-rails-view">The Rails View</a> and the best chapter for me was about presenters. I&#8217;ve been <a href="http://blog.nhocki.com/2012/01/31/thoughts-on-decorators-and-presenters/">working with this</a> for a while and I have to admit I love the approach presented on the view.</p>

<p>All the presenters I&#8217;ve done were <a href="http://blog.nhocki.com/2012/01/10/simple-presenters--decorators-on-rails/">instantiated in the controller</a>. In the book they suggest that <strong>if the presenter doesn&#8217;t depend on params or session variables it&#8217;s the view responsibility to create it</strong>. This is extremely flexible specially when we&#8217;re presenting various objects on the same view. Here&#8217;s an example to present users in our application, let&#8217;s use the same presenter for the <em>index</em> and <em>show</em> actions, but let&#8217;s make it in a really simple way!</p>

<h3>The Helper &amp; View</h3>

<p>Let&#8217;s create the helper method first. It&#8217;s really simple and will take a block that we can use to build a custom markup &#8220;on the fly&#8221;.</p>

<div><script src='https://gist.github.com/2640442.js?file=user_helpers.rb'></script>
<noscript><pre><code># app/helpers/user_helpers.rb
def basic_information_for(user = @user, options = {})
  presenter = UserBasicPresenter.new(user, self, options)
  if block_given?
    yield(presenter)
  else
    presenter
  end
end</code></pre></noscript></div>


<p>Now, let&#8217;s take a look at the views. In the <strong>show</strong> action, we&#8217;re going to present only one user, and we can easily build the custom view for this. In the <strong>index</strong> action, we&#8217;ll present all a &#8220;basic info&#8221; for the each user. We have that in a partial because this is used for all the collections of users in our application. Here&#8217;s the view code:</p>

<div><script src='https://gist.github.com/2640442.js?file=user_views.html.erb'></script>
<noscript><pre><code># app/views/show.html.erb
&lt;% basic_information_for do |user|  %&gt;
  &lt;p&gt;&lt;%= user.name %&gt;&lt;/p&gt;
  &lt;p&gt;&lt;%= user.status %&gt;&lt;/p&gt;
  ...
&lt;% end %&gt;

# app/views/index.html
&lt;% @users.each do |user| %&gt;
  &lt;%= basic_information_for(user) %&gt;
&lt;% end %&gt;</code></pre></noscript></div>


<h3>The Presenter, A.K.A What&#8217;s happening here?</h3>

<p>What makes this <strong>really</strong> clean is that we can actually use <code>&lt;%=  %&gt;</code> directly on our helper method. This works because we&#8217;ll define the <code>to_s</code> method in our presenter! In this method we <strong>render our partial in the context of the helper</strong>, which is amazing. Here&#8217;s the code for that:</p>

<div><script src='https://gist.github.com/2640442.js?file=user_basic_presenter.rb'></script>
<noscript><pre><code># app/presenters/user_basic_presenter.rb
class UserBasicPresenter
  def initialize(user, template, options = {})
    @user     = user
    @options  = options
    @template = template
  end

  # more methods ...

  def to_s
    @template.render partial: 'user/basic', object: self
  end
end</code></pre></noscript></div>


<p>Is <strong>that</strong> simple! We have a unique interface (the helper) that will work great in both places! We could obviously make the presenter more complex, otherwise, why use it?</p>

<p>Even though I haven&#8217;t used this approach a lot, I&#8217;m really happy with it. I felt the difference instantly and it made a lot of sense to me. Being able to mix this with a <a href="http://blog.nhocki.com/2012/03/29/flexible-and-friendly-layouts-on-rails/">flexible layout</a> is really powerful!</p>

<h3>Feedback</h3>

<p>I&#8217;m also really interested in how people are using presenters. I&#8217;d love to gain more feedbacks and points of view about this. Feel free to post a comment (here on in the gist) or ping me on Twitter, <a href="https://twitter.com/nhocki">@nhocki</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Flexible and friendly layouts on rails]]></title>
    <link href="http://blog.nhocki.com/2012/03/29/flexible-and-friendly-layouts-on-rails/"/>
    <updated>2012-03-29T23:16:00-04:00</updated>
    <id>http://blog.nhocki.com/2012/03/29/flexible-and-friendly-layouts-on-rails</id>
    <content type="html"><![CDATA[<p>I&#8217;ve been working on a &#8220;new&#8221; project (I&#8217;m new to the project, the project itself is &#8216;old&#8217;) and at the beginning I had to edit a bunch of stuff in the views.</p>

<p>A friend needed to change the header of the page on <strong>one</strong> action of the <code>UsersController</code>. He is new to rails and was struggling with this, so he asked me for help.</p>

<p>It&#8217;s pretty common to have a <code>header</code> partial rendered on the view. If you&#8217;re a lovely developer you would have <code>render "header"</code> and not something like <code>render "layouts/header"</code>. The reason behind this is simple. <a href="http://railscasts.com/episodes/269-template-inheritance" title="Railscasts Template Inheritance">Template Inheritance</a>. This means that if you&#8217;re working on the <code>UsersController</code>, when rails looks for the <code>header</code> partial, it will first look for <code>users/header</code> moving up the parents chain, ending in <code>application/header</code>. So, next time, put all your <em>layout</em> stuff in <code>application/_partial</code> so you can easily override it!</p>

<p>But this is a <em>controller wide</em> solution, since all the actions from that controller will render the same partial. So, how do you achieve this on a single action? My solution is a 3 line helper:</p>

<div><script src='https://gist.github.com/2246251.js?file=application_helper.rb'></script>
<noscript><pre><code># This method will allow a section to be rendered form a view or
# to render a partial instead.
# 
# It's really useful to have 'flexible' sections in the layout. E.g
# add this to your layout file:
#
# content_or_partial(:header)
#   =&gt; renders the content_for(:header) or the &quot;header&quot; partial
#
# content_or_partial(:header, 'users/hello')
#   =&gt; renders the content_for(:header) or the &quot;users/hello&quot; partial
#
# application.html.erb
#   &lt;header class=&quot;main-header wrapper&quot;&gt;&lt;%= content_or_partial(:header) %&gt;&lt;/header&gt;
#
# users/show.html.erb
#   &lt;%= content_for :header do %&gt;
#     My action specific content
#   &lt;% end %&gt;
#
def content_or_partial(content, partial = content)
  content_for?(content) ? content_for(content) : render(partial.to_s)
end</code></pre></noscript></div>


<p>Now all you have to do is fill your layouts with &#8220;content boxes&#8221; that can be changed on an controller or action-specific need, giving great flexibility.</p>

<p>How would you get around this?</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Thoughts on Decorators & Presenters]]></title>
    <link href="http://blog.nhocki.com/2012/01/31/thoughts-on-decorators-and-presenters/"/>
    <updated>2012-01-31T18:12:00-05:00</updated>
    <id>http://blog.nhocki.com/2012/01/31/thoughts-on-decorators-and-presenters</id>
    <content type="html"><![CDATA[<p>I have been developing a new app using a lot of <a href="http://blog.nhocki.com/2012/01/10/simple-presenters--decorators-on-rails/">decorators and presenters</a>. I&#8217;ve been highly influenced by <a href="http://about.avdi.org/">Avdi</a> (both his <a href="http://avdi.org/devblog/">blog</a> and his <a href="http://avdi.org/devblog/2011/11/15/early-access-beta-of-objects-on-rails-now-available-2/">Objects in Rails book</a>) and <a href="http://steveklabnik.com">Steve Klabnik</a>, but now I have a problem. My decorators are starting to get big. I&#8217;ll have to use <code>concerns</code> for that. Expect another post about it (maybe).</p>

<p><strong>I want to warn you that I am not by any means an expert on the subject. So I&#8217;m more than open to any feedback you can give me.</strong></p>

<blockquote><p>All presenters are decorators, but not all decorators are presenters.</p>

<p>A decorator is a class that adds some sort of functionality to another
class. A presenter is a class that adds some sort of presentation
formatting functionality to another class.</p>

<p><a href="https://groups.google.com/forum/#!msg/objects-on-rails/htAopf3k_dM/qJMq6QAfMvsJ">Steve Klabnik</a></p></blockquote>

<p>I think that what a decorator <em>should</em> do is give a standard API for the processed data stored somewhere (probably a database). I don&#8217;t think a decorator should be in charge of the markup of the presented data. For me, it makes no sense that the decorator (that is processed data for me), knows <em>how</em> it is being shown to the user.</p>

<p>That said, I think the <strong>same</strong> decorator should be used to build the JSON response and the HTML response. The HTML markup and JSON structure are <em>just</em> &#39;markup&#39;. So, they can be treated as templates.</p>

<h3>So, where do the logic in the template goes?</h3>

<p>I had this discussion with a <a href="http://mheroin.com/">friend</a>, and he asked me that, with this approach, how would he add elements to a view depending on a condition, for example, the famous &#39;<strong><em>You are logged in as nhocki</em></strong>&#39; if there&#8217;s a user logged in.</p>

<p>I think this should be created inside helper methods that takes a block. Inside that block you can use the <strong>decorator</strong> methods to show the needed data. You can use those methods in your JSON builder too (try out the new <a href="https://github.com/rails/jbuilder">Jbuilder</a>). You could bundle up these methods and re-use them in your projects too.</p>

<p>Here&#8217;s an example:</p>

<div><script src='https://gist.github.com/1714913.js?file='></script>
<noscript><pre><code># app/models/user.rb
#
# User model has name &amp; username
#
# Only the username is required (signup with Github for example)
class User &lt; ActiveRecord::Base
  validates :username, presence: true
end



# app/decorators/user_decorator.rb
#
# Let's use the Draper gem for the decorators
class UserDecorator &lt; ApplicationDecorator
  decorates :user

  def display_name
    user.name.presence || user.username
  end

  # Formatting the data is OK. I'm against adding the markup
  def salary
    h.number_to_currency(user.salary)
  end
end


# app/views/users/index.html.erb

# current_user is a presenter
&lt;%= logged_in_area do %&gt;
  You are logged in as &lt;%= current_user.display_name %&gt;
&lt;% end %&gt;

# viewing @some_users's profile (which is also a presenter)
&lt;%= admin_area do %&gt;
  &lt;span class=&quot;salary&quot;&gt;&lt;%= @some_user.salary %&gt;&lt;/span&gt;
&lt;% end %&gt;


# app/helpers/application_helpers.rb
#
# We all hate helpers, but this time, they're useful.
def admin_area(&amp;block)
  content_tag(:div, capture(&amp;block), class: 'admin') if current_user.admin?
end</code></pre></noscript></div>


<h3>Maybe I have the names wrong</h3>

<p>As I mentioned before, I&#8217;m no expert on design patterns. And I&#8217;m pretty <em>new</em> to presenters and decorators. So, maybe my approach has a different name. I don&#8217;t really care how this is called, I feel it&#8217;s a more natural approach and it keeps the template and the processed data in different parts.</p>

<h3>Please provide feedback</h3>

<p>It is also possible that I have it all wrong, that&#8217;s why I&#8217;m really interested in your opinion. I&#8217;m eager to learn about everything from anyone, so I would love to have some feedback about this. You can post a comment below or send me a message on <a href="http://twitter.com/nhocki">twitter</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[From Tumblr to Octopress]]></title>
    <link href="http://blog.nhocki.com/2012/01/23/from-tumblr-to-octopress/"/>
    <updated>2012-01-23T00:00:00-05:00</updated>
    <id>http://blog.nhocki.com/2012/01/23/from-tumblr-to-octopress</id>
    <content type="html"><![CDATA[<p>I wrote an article yesterday about URL design and I spent about an hour fighting with <a href="http://tumblr.com/">Tumblr</a> to format my <code>code inside a pre (or code) tag</code>. I knew I was done with them. Today, I&#8217;m giving <a href="http://octopress.org/">Octopress</a> a try. I honestly wanted to try <a href="http://jekyllrb.com/">Jekyll</a> but I was really lazy to code my HTML. So, for now, I&#8217;m welcoming Octopress.</p>

<p>I really love the fact that I can write in <a href="http://daringfireball.net/projects/markdown/">Markdown</a>, it&#8217;s really powerful yet simple that makes me focus on writing and not formatting. I know I can use Markdown in Tumblr but I don&#8217;t have Textmate there, so this is a big +1 for Jekyll/Octopress.</p>

<h2>Moving Posts From Tumblr</h2>

<p>There&#8217;s a <a href="https://github.com/mojombo/jekyll/wiki/Blog-Migrations">great script</a> to move posts from Tumblr. They&#8217;ll even be downloaded as markdown, but I still had to edit them to add the Gist snippets. Thankfully I don&#8217;t have a lot of posts so it didn&#8217;t took a lot.</p>

<h2>Deploying</h2>

<p>I&#8217;ve deployed my blog to <a href="http://heroku.com">Heroku</a> now. It was supposed to be really simple. It was, after I realized that the <code>public</code> folder is ignored by the git. I spent an hour of my life there :-( !</p>

<pre>Remove the public folder from your .gitignore</pre>


<p>I&#8217;ll probably post more about Octopress when I get to know it better. There are a bunch of plugins and stuff that may be useful, or maybe, it&#8217;ll suck and I&#8217;ll have to go and find something else!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Beautiful URLs in Rails. The easy way.]]></title>
    <link href="http://blog.nhocki.com/2012/01/22/beautiful-urls-in-rails-the-easy-way/"/>
    <updated>2012-01-22T00:00:00-05:00</updated>
    <id>http://blog.nhocki.com/2012/01/22/beautiful-urls-in-rails-the-easy-way</id>
    <content type="html"><![CDATA[<p>I&#8217;ve always been in love with <a href="http://warpspire.com/posts/url-design/">beautiful URL design</a>. Specially for &#8216;public&#8217; parts of the site. In Rails, it&#8217;s pretty common to use the ID of the object in the URL. Well, that <strong>really</strong> sucks.</p>

<p>My first approach to solve this problem was started by <a href="http://mheroin.com/">Federico Builes</a> a long time ago with a plugin (<a href="https://github.com/nhocki/make_permalink">which I now maintain</a> as a gem) called <a href="http://rubygems.org/gems/make_permalink">Make Permalink</a>. It&#8217;s really easy to use and will (up to some point) solve the problem. I know <a href="http://rubygems.org/gems/friendly_id">FriendlyID</a> exists, but I <em>hate</em> having the permalink field in my database (I <em>always</em> forget it) so that&#8217;s why I like Make Permalink&#8217;s approach.</p>

<div><script src='https://gist.github.com/1660555.js?file=make_permalink_example.rb'></script>
<noscript><pre><code>class Post &lt; ActiveRecord::Base
  make_permalink :title

  # Override this method to have nice looking
  # URLs. You still use `Post.find` in the controller
  # and will get URL like this:
  #
  #    /posts/1-look-mom-i-rock
  def to_param
    permalink
  end
end
</code></pre></noscript></div>


<p>The good thing about having <code>/users/1-nhocki</code> as the URL is that is way better than <code>/users/1</code> <strong>AND</strong> you don&#8217;t have to change any of your app for that (you can still use <code>find</code> in your controllers).</p>

<p>I was really glad with this but not too long ago, someone asked me for something similar but for Mongoid. And hell! Mongoid ids are ugly as shit! So, they wanted to have <em><strong>just</strong></em> the username. I said, well, why don&#8217;t you just change the <code>to_param</code> method to return the username and use <code>User.find_by_username</code> everywhere?</p>

<p>Even though this actually works, I would be very tired from writing <code>find_by_username</code> over and over again. So I told him to write a <code>fetch</code> method where he could get an user either by the <code>id</code> or the <code>username</code>. I think this is pretty convenient and nice, but I would <em><strong>hate</strong></em> to write that fetch method in every model. So, with some metaprogramming we can easily do this.</p>

<p>First, I&#8217;ve created a <code>fetchable_on</code> method to use it in your models. This will define a class method called <code>fetch</code> that will let you get the object by querying on the <code>attribute</code> <strong>OR</strong> on the <code>id</code>. Right now, it won&#8217;t work if your attribute is a numeric value (like the number of bathrooms you have in your house), but most of the times, it&#8217;s ok. Here&#8217;s the code. Place it in your initializers folder.</p>

<div><script src='https://gist.github.com/1657758.js?file='></script>
<noscript><pre><code># config/initializers/fetchable.rb

# encoding: UTF-8

module Extensions
  module Fetchable
    # Adding `fetchable_on` to a model will define the `fetch` method
    # that will allow you to query that model with the `attribute` or `id`.
    #
    # Having the following:
    #
    #    class User &lt;&lt; ActiveRecord::Base
    #      fetchable_on :username
    #    end
    #
    # Will let you fetch users by username or id.
    #
    #    User.fetch('nhocki').id # =&gt; 1
    #    User.fetch(1).username # =&gt; nhocki
    def fetchable_on(attribute)
      define_singleton_method(&quot;fetch&quot;) do |*args|
        looked_value = args.shift
        begin
          find(looked_value.to_i, *args)
        rescue ActiveRecord::RecordNotFound
          send(&quot;find_by_#{attribute}!&quot;, looked_value.to_s, *args)
        end
      end
    end
  end
end

ActiveRecord::Base.extend(Extensions::Fetchable)</code></pre></noscript></div>


<p>That way, you just need to call <code>fetchable_on :attribute</code> in your model and it&#8217;ll adjust the <code>fetch</code> method to query on that <code>attribute</code> or the <code>id</code>. Here&#8217;s an example:</p>

<div><script src='https://gist.github.com/1660555.js?file=fetchable_example.rb'></script>
<noscript><pre><code>class User &lt; ActiveRecord::Base
  fetchable_on :username

  # URL Style: /users/nhocki
  def to_param
    username
  end
end

# Gives you the `fetch` method.
# It takes the username or the id.
# Use fetch in your controller

User.fetch('nhocki').id # =&gt; 1
User.fetch(1).username  # =&gt; 'nhocki'
</code></pre></noscript></div>


<p><strong>Note that I use <code>find_by_attribute!</code> to throw an exception if the object is not found. Using the method without a <code>!</code> will return <code>nil</code> if there&#8217;s no object in the DB.</strong></p>

<p>How would you implement this? Any good solutions?</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Simple Presenters & Decorators on Rails]]></title>
    <link href="http://blog.nhocki.com/2012/01/10/simple-presenters--decorators-on-rails/"/>
    <updated>2012-01-10T00:00:00-05:00</updated>
    <id>http://blog.nhocki.com/2012/01/10/simple-presenters&#8211;decorators-on-rails</id>
    <content type="html"><![CDATA[<p>There&#8217;s been a <a href="http://blog.steveklabnik.com/posts/2011-09-06-the-secret-to-rails-oo-design">lot</a> of <a href="http://blog.steveklabnik.com/posts/2011-09-09-better-ruby-presenters">talk</a> <a href="http://avdi.org/devblog/2011/11/15/early-access-beta-of-objects-on-rails-now-available-2/">about</a><a href="http://robots.thoughtbot.com/post/14825364877/evaluating-alternative-decorator-implementations-in">decorators</a> and <a href="http://robots.thoughtbot.com/post/13641910701/tidy-views-and-beyond-with-decorators">presenters</a> (<a href="https://groups.google.com/forum/#!msg/objects-on-rails/htAopf3k_dM/qJMq6QAfMvsJ">which are almost the same</a>) in Rails and how they help you with a &#8220;real&#8221; OO code. There are great gems and there&#8217;s even a <a href="http://railscasts.com/episodes/287-presenters-from-scratch">Railscast</a> (pro) on how to build a presenter from scratch. But, in the new project I&#8217;m working on, we (&lt;- <a href="https://github.com/febuiles">he</a>) has this <strong>really</strong> simple setup which I feel kind of cleaner.</p>

<p>What we wanted to have was a <code>present</code> method in the controller and build the view from its methods. So, we created an <a href="http://api.rubyonrails.org/classes/ActiveSupport/Concern.html">ActiveSupport::Concern</a> called <code>Presentable</code> and included it in our application controller. Here&#8217;s our (once again, his) code for that module.</p>

<div><script src='https://gist.github.com/1592754.js?file=presentable.rb'></script>
<noscript><pre><code># app/concerns/controllers/presentable.rb

# Presentable Concern
# Include this module in the controllers where
# you need the `present` method.
module Presentable
  # This method returns a Presenter Object to work
  # with in the view.
  #
  # Attributes:
  #   object:   The object to present
  #
  # Supported Options
  #    as:   The presenter class. If this is not suplied 
  #          the method will try to guess the class
  #          e.g: UserPresenter for a User object.
  def present(object, options = { })
    if object.respond_to?(:first)
      return [] if object.empty?
      presenter = &quot;#{object.first.class.to_s.pluralize}Presenter&quot;
    else
      presenter = &quot;#{object.class}Presenter&quot;
    end

    presenter = options.fetch(:as) { eval(presenter) }
    presenter.new(object)
  end
end
</code></pre></noscript></div>


<p>Now, we just need to create each presenter. But, since there&#8217;s a lot of shared logic between presenters we (he) just created a parent <code>Presenter class</code> with all that. Notice that our presenter takes an object as parameter, so we just delegated all the method calls to our record (thank you <code>method missing</code>) if it responded to that method. You could also send the view context to access Rails helpers inside your presenter. Here&#8217;s our <code>Presenter base class</code>.</p>

<div><script src='https://gist.github.com/1592754.js?file=presenter.rb'></script>
<noscript><pre><code># Base presenter class
# All presenters should inherit from this one.
class Presenter
  # Include all the modules you need or
  # send the view context to access rails helpers.
  include Rails.application.routes.url_helpers
  # ...

  include Presentable

  attr_reader :record

  def initialize(record)
    @record = record
    @klass = record.class
  end

  def method_missing(name, *arguments, &amp;block)
    super unless record.respond_to?(name)
    record.send(name, *arguments, &amp;block)
  end

  def translate_field_name(name)
    @klass.human_attribute_name(name)
  end

  # UrlHelper was being an ass, easier to go commando.
  def link_to(name, url, options={})
    href = { :href =&gt; url }
    content_tag(:a, name, options.merge(href))
  end
end
</code></pre></noscript></div>


<p>Then, we just need to inherit from the <code>Presenter</code> class and add our custom, clean methods. Using <code>delegate and method missing</code> will help us keep the class clean. I won&#8217;t show you a presenter here, they&#8217;ll look a lot like Ryan&#8217;s one in his Railscasts so check that out first.</p>

<p>I will show you our controller though. Using the decent_exposure gem we managed to get super tiny controllers. Here&#8217;s 1 of them:</p>

<div><script src='https://gist.github.com/1592754.js?file=requests_controller.rb'></script>
<noscript><pre><code>class RequestsController &lt; ApplicationController
  expose(:filter) { params.fetch(:filter) { :all} }
  expose(:filtered_requests) { Request.filter(filter) }
  expose(:requests) { present(filtered_requests) }

  before_filter :find_request, :only =&gt; [:show, :destroy]

  def index
  end

  def show
    extend(RequestRedirector) # Another concern
    redirect_to_request
  end

  def destroy
    @request.destroy
    redirect_to requests_path(:filter =&gt; &quot;new_requests&quot;), :notice =&gt; &quot;Se ha eliminado la solicitud&quot;
  end

  private
  def find_request
    @request = Request.find(params[:id])
  end
end
</code></pre></noscript></div>


<p>Combining <code>presenters</code> and <code>form builders</code> will make your views even cleaner, giving a lot of pleasure to the future you! So please, just pretty-please, start using presenters and builders and leave helpers as simple as possible. Or, leave them for good.</p>

<p>You&#8217;ll be amazed how different you&#8217;ll feel when reading some old code or some co-worker&#8217;s code.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[But free web services are not like free software]]></title>
    <link href="http://blog.nhocki.com/2011/12/06/but-free-web-services-are-not-like-free-software/"/>
    <updated>2011-12-06T00:00:00-05:00</updated>
    <id>http://blog.nhocki.com/2011/12/06/but-free-web-services-are-not-like-free-software</id>
    <content type="html"><![CDATA[<blockquote><p>But free web services are not like free software. If your free software project suddenly gets popular, you gain resources: testers, developers and people willing to pitch in. If your free website takes off, you lose resources. Your time is spent firefighting and your money all goes to the nice people at Linode.</p></blockquote>

<p>Don&#8217;t be a Free User - <a href="http://blog.pinboard.in/2011/12/don_t_be_a_free_user/">Pinboard Blog</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Colorize your rake output]]></title>
    <link href="http://blog.nhocki.com/2011/11/30/colorize-your-rake-output/"/>
    <updated>2011-11-30T00:00:00-05:00</updated>
    <id>http://blog.nhocki.com/2011/11/30/colorize-your-rake-output</id>
    <content type="html"><![CDATA[<p>I&#8217;ve been writing a lot of rake tasks lately. I like to have a lot of output (feedback) from my tasks, at least while I&#8217;m writing them. I have colors in my tests, but my output is really ugly, so I took <a href="https://github.com/andmej/chatte/blob/master/client.rb#L15-24">some code</a> from <a href="https://github.com/andmej/chatte/">Chatte</a>, - a simple chat application a <a href="http://andr.esmejia.com/">friend</a> (and awesome <a href="https://github.com/andmej/">developer</a>, btw) wrote for college- and made some modifications for it. Here&#8217;s my module right now…</p>

<div><script src='https://gist.github.com/1410582.js?file='></script>
<noscript><pre><code>module Colors
  def colorize(text, color_code)
    &quot;\033[#{color_code}m#{text}\033[0m&quot;
  end

  {
    :black    =&gt; 30,
    :red      =&gt; 31,
    :green    =&gt; 32,
    :yellow   =&gt; 33,
    :blue     =&gt; 34,
    :magenta  =&gt; 35,
    :cyan     =&gt; 36,
    :white    =&gt; 37
  }.each do |key, color_code|
    define_method key do |text|
      colorize(text, color_code)
    end
  end
end

# green &quot;Hello&quot;
#   =&gt; &quot;\e[32mHello\e[0m&quot;</code></pre></noscript></div>


<p>Now, you just need to <code>include Colors</code> in your tasks and enjoy your life.</p>

<p>I know there&#8217;s a <a href="https://github.com/fazibear/colorize">colorize</a> gem out there, but I don&#8217;t like their syntax. I prefer Andres&#8217; approach much more, so maybe I&#8217;ll turn this into a really simple gem. Do you think it&#8217;s worth it?</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Algorithms are on the cutting edge of entrepreneurship.]]></title>
    <link href="http://blog.nhocki.com/2011/11/09/algorithms-are-on-the-cutting-edge-of-entrepreneurship/"/>
    <updated>2011-11-09T00:00:00-05:00</updated>
    <id>http://blog.nhocki.com/2011/11/09/algorithms-are-on-the-cutting-edge-of-entrepreneurship</id>
    <content type="html"><![CDATA[<blockquote><p>Algorithms are on the cutting edge of entrepreneurship. If you&#8217;re talking
about just re-implementing stuff that people did ten years ago, performance
isn&#8217;t that important at some level. But, if you&#8217;re talking about doing stuff
that nobody has done before, one of the reasons often that they haven&#8217;t done
it is because it&#8217;s too time-consuming.</p></blockquote>

<p>By Charles Leiserson</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Compile assets and push them - no pain involved!]]></title>
    <link href="http://blog.nhocki.com/2011/09/28/compile-assets-and-push-them---no-pain-involved/"/>
    <updated>2011-09-28T00:00:00-04:00</updated>
    <id>http://blog.nhocki.com/2011/09/28/compile-assets-and-push-them&#8212;no-pain-involved</id>
    <content type="html"><![CDATA[<p>This week, I&#8217;ve been working on a side project with <a href="http://andr.esmejia.com/">Andrés
Mejía</a> (<a href="http://twitter.com/andmej">@andmej</a>) and
for some really really sad reason <a href="http://heroku.com">Heroku</a> is not working
as expected (a simple git push should do the trick, but we&#8217;re having a really
<a href="https://github.com/ddollar/rails_log_stdout/issues/4">weird issue</a>).</p>

<p>At first, I thought it had something to do with the assets. Even-though
<a href="http://heroku.com">Heroku</a> has <a href="h%0Attp://devcenter.heroku.com/articles/rails31_heroku_cedar#the_asset_pipeline">asset compiling tasks on their Cedar stack</a>,
it didn&#8217;t really worked for us at first. So I just decided to create a small
rake task to compile the assets and push them to Github.</p>

<p>The good thing about this rake task is that it will only push the assets. This
means, that <strong>you&#8217;ll need a clean git tree to run this task or it will die</strong>.
This ensures that the automatic push <strong>won&#8217;t commit any non-related change to
the compilation of the assets</strong>.</p>

<p>Now, you only have to run <strong>rake assets:compile</strong> and sleep well at night.
Here&#8217;s the code. Hope it helps.</p>

<div><script src='https://gist.github.com/1241135.js?file='></script>
<noscript><pre><code>namespace :assets do
  desc &quot;Compile all the assets named in config.assets.precompile and push them&quot;
  task :compile do
    AssetsCompiler.new.compile
  end

  class AssetsCompiler
    def compile
      ensure_clean_git
      removed_previous_assets
      compile_assets
      commit_compiled_assets
      push
    end

    def ensure_clean_git
      raise &quot;Can't deploy without a clean git status.&quot; if git_dirty?
    end

    def removed_previous_assets
      run &quot;bundle exec rake RAILS_ENV=production assets:clean&quot;
    end

    def compile_assets
      run &quot;bundle exec rake RAILS_ENV=production assets:precompile&quot;
    end

    def commit_compiled_assets
      run &quot;git add -u &amp;&amp; git add . &amp;&amp; git commit -am 'Compiled assets'&quot;
    end

    def push
      run &quot;git push&quot;
    end

    private

    def run(command)
      puts &quot;+ Running: #{command}&quot;
      puts &quot;-- #{system command}&quot;
    end

    def git_dirty?
      `[[ $(git diff --shortstat 2&gt; /dev/null | tail -n1) != &quot;&quot; ]]`
      dirty = $?.success?
    end
  end
end</code></pre></noscript></div>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Simple scrollbar synchronization with jQuery]]></title>
    <link href="http://blog.nhocki.com/2011/09/21/simple-scrollbar-synchronization-with-jquery/"/>
    <updated>2011-09-21T00:00:00-04:00</updated>
    <id>http://blog.nhocki.com/2011/09/21/simple-scrollbar-synchronization-with-jquery</id>
    <content type="html"><![CDATA[<p>I&#8217;m working on a really cool project on my University. It&#8217;s a web application
to compare book editions and help professors build what is know as the
Collatzio. The Collatzio is simply the &#8220;original&#8221; version of the book. That
means, to have the book the author wanted to write and not the one that the
editors wanted to publish.</p>

<p>I needed to have two versions of the book aligned side by side. So, the
HTML/CSS was pretty simple. Just have two simple divs with <strong>overflow-y:
auto;</strong> to make the scrollbar appears on each div.</p>

<p>The coffeescript code I used is really simple, here it is:</p>

<div><script src='https://gist.github.com/1233545.js?file='></script>
<noscript><pre><code>jQuery ($) -&gt;
  ($ &quot;.scroll-text&quot;).scroll (event) -&gt;
    trigger = ($ @)
    element = trigger.data(&quot;scrolls&quot;)
    $(element).scrollTop(trigger.scrollTop())
    event.preventDefault()
    return false</code></pre></noscript></div>


<p>Hope it helps someone. I struggled a little bit with the &#8220;common&#8221; way of
scrolling things. People usually use the <code>animate</code> method to scroll the body,
but I couldn&#8217;t use it because it kept triggering the scroll event on the
elements, so it was an infinite loop.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">$</span><span class="p">(</span><span class="s2">&quot;html, body&quot;</span><span class="p">).</span><span class="nx">animate</span><span class="p">({</span> <span class="nx">scrollTop</span><span class="o">:</span> <span class="mi">0</span> <span class="p">},</span><span class="err"> </span><span class="s2">&quot;slow&quot;</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[TimeHub, the first winner!]]></title>
    <link href="http://blog.nhocki.com/2011/08/26/timehub-the-first-winner/"/>
    <updated>2011-08-26T00:00:00-04:00</updated>
    <id>http://blog.nhocki.com/2011/08/26/timehub-the-first-winner</id>
    <content type="html"><![CDATA[<p>I just wanted to &#8220;personally&#8221; say thanks to everyone who voted for my entry on
the <a href="http://rallyonrails.com">Rally on Rails</a> (Latinamerican Rails Rumble).</p>

<p><a href="http://timehub.net">Timehub</a> won! And this couldn&#8217;t be possible without the
people who voted.</p>

<p>I would like to thank the Rally on Rails team &amp; judges. They made an excellent
job and even though there are somethings to improve (like the voting rules),
<strong>I think that the contest was great!</strong></p>

<p>We had already posted a &#8221;<a href="http://blog.timehub.net/post/9404894926/from-medellin-with-love">thank you
note</a>&#8221;, in
the <a href="http://timehub.net">Timehub</a> blog, but I really wanted to write one
myself.</p>

<p>I was pretty spammer during these last 3 days! That will stop now!</p>

<p><strong>Thanks again!</strong> Hope to see you in <a href="http://timehub.net">Timehub</a> v2!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Upgrade to Rails 3.1 Quickfix]]></title>
    <link href="http://blog.nhocki.com/2011/08/24/upgrade-to-rails-31-quickfix/"/>
    <updated>2011-08-24T00:00:00-04:00</updated>
    <id>http://blog.nhocki.com/2011/08/24/upgrade-to-rails-31-quickfix</id>
    <content type="html"><![CDATA[<p>In case you missed it, <a href="http://guides.rubyonrails.org/3_1_release_notes.html">Rails 3.1 is out</a>! So please, stop using the release candidates and update now!</p>

<p><strong>Short Version; TL;DR</strong></p>

<p><strong>If you&#8217;re can&#8217;t see your images in your production environment, add this to your <code>production.rb</code> file</strong></p>

<div><script src='https://gist.github.com/1185431.js?file='></script>
<noscript><pre><code># Capistrano task to compile assets
# Make sure that you have `config.assets.compile = true` in production.rb when running this
# This (the `compile=true`) won't be needed for Rails 3.1.1

desc &quot;Precompile assets on production&quot;
task :assets do
  run &quot;cd #{release_path}; RAILS_ENV=production bundle exec rake assets:clean&quot;
  run &quot;cd #{release_path}; RAILS_ENV=production bundle exec rake assets:precompile&quot;
end</code></pre></noscript></div>


<p>Yesterday, I was updating <a href="http://timehub.net">Timehub</a> to Rails 3.1, we had a rails3.1 branch and we were just waiting for the official version to change it.</p>

<p>As soon as I got home from the <a href="http://coffeegrid.org/">Coffee Grid</a> meetup (where we talked about Timehub), I decided to update it. What could possibly go wrong? We&#8217;ve been using a release candidate with <strong>no more than 3 days old</strong> and it was working just fine.</p>

<p>We changed our <code>Gemfile</code> and started to use Rails 3.1. We tested the app on development and everything was working as expected, so I just relaxed while deploying.</p>

<p>I <strong>always</strong> look at the server after a deploy, and to my surprise, <strong>no images where shown in the production environment</strong>. WTF? We were compiling our assets (with a small Capistrano task).</p>

<p>We watched the source of the page and instantly found the problem. The server was not looking for the images with the MD5 digest at the end. This was REALLY weird because we were using <code>image_tag</code> everywhere so we shouldn&#8217;t care about it!</p>

<p>This means that the server was looking for <code>/assets/rails.png</code> instead of
<code>/assets/rails-3289328982JAKSDJK.png</code></p>

<p>I looked to the awesome <a href="http://guides.rubyonrails.org/asset_pipeline.html">Asset Pipeline Guide</a>, I asked around with Twitter, I restarted the server several times. I did everything and nothing worked until <a href="https://twitter.com/#!/guilleiguaran">@guilleiguaran </a>gave me the answer on twitter!</p>

<p>You simply need to add those 2 lines to fix your assets (look up if you missed it!)</p>

<p>The problem is that it wasn&#8217;t really documented and that the release candidates didn&#8217;t have that! So it was <strong>REALLY</strong> hard to guess. Actually, I think @guilleiguaran knew because he made those changes!</p>

<p>After that, we could easily update and now we&#8217;re 100% on Rails 3.1!</p>

<p>Hope this helps you too!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[TimeHub 48 hours after]]></title>
    <link href="http://blog.nhocki.com/2011/08/24/timehub-48-hours-after/"/>
    <updated>2011-08-24T00:00:00-04:00</updated>
    <id>http://blog.nhocki.com/2011/08/24/timehub-48-hours-after</id>
    <content type="html"><![CDATA[<p>As you may know, we created <strong><a href="http://timehub.net">Timehub</a></strong> in under 48
hours for the Rally on Rails contest. I wanted to write this post because it&#8217;s
been 48 hours since the <strong>public votes were opened</strong>.</p>

<p><strong>First of all, I would like to thank EVERYONE that has talked about Timehub. It&#8217;s been really nice to see all the comments and feedback. It&#8217;s been even better to see so many votes so fast! We honestly didn&#8217;t expected this support and having over 3950 points in under 48 hours! THANK YOU!</strong></p>

<p>it&#8217;s important to note that votes are still open (until August 26th), and if
you haven&#8217;t vote for us, you should! <a href="http://ranking.timehub.net/how-to-%0Avote">Click here to get the instructions and a
free heavenly holly ice-cream at the end</a> (spanish version <a href="http://ranking.timehub.net/como-votar">here</a>).</p>

<h2>The Judges</h2>

<p>It&#8217;s an honor to say that we won the judges votes. We got 88 points and got
the first place. Really really, scary-close was team 53 (moove it) with 86
points and in third place, it was team 43 (ochoigualiguald) with 82 points!</p>

<p>We were the only ones with 5/5 in innovation which really made us happy!</p>

<p><strong>I would like to thank the judges, sponsors and the Rally on Rails team to make this contest possible.</strong></p>

<p>Now, let&#8217;s look at the public votes.</p>

<h2>How we started</h2>

<p>We started tweeting A LOT when we found out the votes were opened. <strong>Sorry for
all the spam my dear followers. It won&#8217;t last long. I promise. </strong>We really
needed the first impulse to make people notice us.</p>

<p><img src="https://img.skitch.com/20110824-rkkxubg89pdq5a9ctj1xm1i611.jpg" alt="My spam" /></p>

<p>We tweeted friends, coworkers, students, professors, some ruby-heroes, some
&#8220;public&#8221; tweets. Everything. We have a Skype conversation with what we tweeted
and prepared other tweets too. <strong>We&#8217;ve been thinking them for a while (is not
coincidence that our about page is actually a &#8220;showing our love&#8221; page (<a href="http://timehub.net/love">[http:
//timehub.net/love](http://timehub.net/love)</a>)</strong>.</p>

<h2>What we got</h2>

<p>We really did not expect what came next. A lot of people started talking about
<strong>Timehub</strong>. <strong>I had never felt like a rockstar before, but today was my day!
</strong>We got a lot of nice feedback. Ryan Bates from
<a href="http://railscasts.com">Railscasts</a>
<a href="https://twitter.com/rbates/status/106034170756739072">responded</a> (it was
AWESOME having him reply our tweet!). <a href="https://github.com/defunkt">Chris
Wanstrath</a> (defunkt - Githubs CEO) <a href="https://twitter.com/#!/defunkt/status/106061419325308928">retweeted
this</a>. Heck, we even
got a <a href="https://twitter.com/jcleblanc/status/105910807119933440">O&#8217;Reilly writer to tweet about
it</a>! The coolest
thing about that is that we really didn&#8217;t ask them to do that (we asked Ryan,
but the writer was just on his own will!) That was beautiful! Matthias Wiemann
tweeted and got 33 RTs!</p>

<p><img src="http://f.cl.ly/items/0M1Z0f1a1b0X1M3m1d2q/Screen%20Shot%202011-08-2%0A4%20at%201.49.28%20AM.png" alt="33 RTS!" /></p>

<p>We were on <a href="http://news.ycombinator.com/">Hacker News</a> main page for a while.
In fact, that&#8217;s were we got the most feedback and visits from (more on that
later, with some graphs).</p>

<p>Of course, not everything was rainbows and butterflies. We also got some &#8220;bad&#8221;
<a href="https://twitter.com/#!/ifesdjeen/status/105970902675636224">comments</a> and
feedback (<strong>which we honestly really appreciate</strong>), but that was expected. We
admit, and have always admitted that the commit DLS needs to be MUCH better.
We&#8217;ll considering git notes and creating a gem to make it easier and keeping
commits as clean as possible. But we had 48  hours so for now, that&#8217;s the best
we could do.</p>

<h2>Cheating</h2>

<p>We were doing great (we still are btw) until some guys started cheating! I
thought, <strong>&#8220;OMG we&#8217;re doing SO GREAT that they have to cheat!&#8221;</strong> We created a
<a href="http://ranking.timehub.net/cheating">report</a> about it, and send it to the
judges. We decided to remove <a href="http://ranking.timehub.net/">our global ranking
page</a> while this was fixed. Judges fixed it right
away and we were back in the game!</p>

<p>This really made us sad. We worked really hard on the app and were working
(spamming) a lot to keep people talking about it.</p>

<h2>Conclusion and Data</h2>

<p>So, according to Google Analytics, we&#8217;ve got <strong>7,420 visits </strong>and<strong> 10,658
pageviews. </strong>This is amazing for 2 days. Honestly, didn&#8217;t expect it!</p>

<h2>Country/Territory of visits</h2>

<p>Probably what shocked me the most is that we&#8217;re now getting more visits from
the U.S than from Colombia. This is shocking because I expected my friends to
visit the site, but I don&#8217;t have more friends in the U.S than here! Here&#8217;s the
Top Five (out of <strong>104</strong> countries):</p>

<p><img src="http://f.cl.ly/items/1c3A0V1i1y1T0B3I1v22/Screen%20Shot%202011-08%0A-24%20at%202.18.13%20AM.png" alt="Top Five!" /></p>

<p>Honestly, 2000+ visits agains 800+? That&#8217;s a HUGE difference! Here&#8217;s the whole
map</p>

<p><img src="http://f.cl.ly/items/3a392z3f0r1I2W3j2i2K/Screen%20Shot%202011-08-24%20at%%0A202.20.59%20AM.png" alt="" /></p>

<h2>Traffic Sources</h2>

<p>The traffic sources also amazed me. We&#8217;ve had more referred visits than direct
traffic, but that was not really shocking (who&#8217;s gonna write timehub.net
anyway?)</p>

<p>What really shocked me is that even though we tweeted A LOT, got a lot of RTs
and a lot of people tweeted, it was half of the visits we got from Hacker
News!</p>

<p>With <strong>2,799 visits </strong>(more than direct traffic visits! - 2,424) Hacker News
was the #1 referrer and traffic source for us. Twitter (t.co + twitter.com)
was the second referrer but with <strong>851 visits (713 from t.co and 130 from
twitter.com)</strong>! That means that we got <strong>over 1900 visits from HN compared to
twitter</strong>! We were only a few minutes in the main page! I can&#8217;t imagine the
traffic a site will get for being there a whole morning! Here&#8217;s the top 10
(plus one) traffic sources:</p>

<p><img src="http://f.cl.ly/items/3l1r101q022e330f370z/Screen%20Shot%202%0A011-08-24%20at%202.29.10%20AM.png" alt="Traffic Sources" /></p>

<p>I added the #11 to show that the traffic <strong>2,799 visits are only from the .com
domain. We&#8217;re getting traffic for .org/.net, ihackernews.com and others like
that!</strong></p>

<p><strong>I will be posting more and more details and info about how it goes. If you havent, please vote for us!</strong></p>

<p><strong>THANKS A LOT,</strong></p>

<p><strong>Nicolás Hock Isaza</strong></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[TimeHub]]></title>
    <link href="http://blog.nhocki.com/2011/08/15/timehub/"/>
    <updated>2011-08-15T00:00:00-04:00</updated>
    <id>http://blog.nhocki.com/2011/08/15/timehub</id>
    <content type="html"><![CDATA[<p>The <a href="http://rallyonrails.com">Rally on Rails</a> contest took place this weekend,
we launched <a href="http://timehub.net">TimeHub</a>, a neat simple app to create
invoices from your Github commits.</p>

<p>The problem we&#8217;re trying to solve here is simple. Most of us use Github, and
we add some commit messages to what we do. Then, we had to go to an invoice
app and write what we did (again!).</p>

<p><strong>Just so you know, we DO NOT access your code or anything related to it. We just need the commit messages. So you can sleep well at night knowing that your private repositories are safe.</strong></p>

<p>This was a waste of time and not fun at all! So we created TimeHub in about
30hours.</p>

<p>We created a <a href="http://blog.timehub.net/">blog</a> and posted a small insight on
how it works. <a href="http://blog.timehub.net/post/8973816486/launched">Read it
here</a>.</p>

<p>You should <a href="http://timehub.net">give it a try</a>! And if you like it, <strong><a href="http://rallyonrails.com/teams/47">please
vote for us</a></strong>!</p>

<p>To keep it simple, here&#8217;s what you should do in your commit messages and let
<a href="http://timehub.net">TimeHub</a> handle the rest.</p>

<div><script src='https://gist.github.com/1156101.js?file='></script>
<noscript><pre><code>Commit Message [T: 2:03]
Commit Message [t:2:3]
Commit Message [t:2]
Commit Message [T: 3]
Commit Message [ t : 4]
Commit Message [  T:  5]
Commit Message [t:120]
Commit Message [t:2 : 03]
Commit Message [t: 2 : 03 ]
Commit Message [t:2h:03]
Commit Message [t:2:3min]
Commit Message [t:2h:3m]
Commit Message [t:2hours:3minutes]
Commit Message [t:2 hours:3 minutes]
Commit Message [t:2 hours : 3 minutes]
Commit Message [T: 2 HOURS : 3 MiNuTeS]
Commit Message [t:2h3m]
Commit Message [t:2h3]
Commit Message [t: 2 hours 3 minutes]
Commit Message [t:2h 3min]
Commit Message [t:2    hours       3 minutes ]
Commit Message [T:2 hours and 3 minutes]
Commit Message [t:2 h &amp; 4 m]
Commit Message [t: 2h 5m ]
Commit Message [t:2 hours]
Commit Message [ t:2m]
Commit Message [ T : 2 minutes]
Commit Message [ t: 2h]
</code></pre></noscript></div>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Transfer data from one Heroku app to another]]></title>
    <link href="http://blog.nhocki.com/2011/07/20/transfer-data-from-one-heroku-app-to-another/"/>
    <updated>2011-07-20T00:00:00-04:00</updated>
    <id>http://blog.nhocki.com/2011/07/20/transfer-data-from-one-heroku-app-to-another</id>
    <content type="html"><![CDATA[<p>Today I needed to transfer all the data from one application (production
environment) to another (staging environment).</p>

<p>I&#8217;m pretty aware that the <a href="https://rubygems.org/gems/taps">taps gem</a> exists
(which is great btw, and I use to pull the data from the production
environment to my development environment), but the problem with the taps gem
is that a table with a lot of data and some indexes will take a while to
migrate.</p>

<p>I guess it was my lucky day because <a href="http://thoughtbot.com/">Thoughtbot</a>
<a href="https://twitter.com/thoughtbot/status/92957355330904064">tweeted</a> with
exactly what I needed. Turns out that using the <a href="http://addons.heroku.com/pgbackups">PG Backups
addon</a> it&#8217;s really easy and fast!</p>

<div><script src='https://gist.github.com/1089598.js?file='></script>
<noscript><pre><code>heroku addons:add pgbackups --remote staging
heroku addons:add pgbackups --remote production
heroku pgbackups:capture --remote production
heroku pgbackups:restore DATABASE `heroku pgbackups:url --remote production` --remote staging</code></pre></noscript></div>


<p>That&#8217;s all you need! Those 4 lines (actually, the last 2) will backup your
production database and then restore that backup in your staging database.</p>

<p>Here is the <a href="https://gist.github.com/1089598">original gist</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Simply put, there’s almost no code worse than no code.]]></title>
    <link href="http://blog.nhocki.com/2011/03/28/simply-put-theres-almost-no-code-worse-than-no-code/"/>
    <updated>2011-03-28T00:00:00-04:00</updated>
    <id>http://blog.nhocki.com/2011/03/28/simply-put-theres-almost-no-code-worse-than-no-code</id>
    <content type="html"><![CDATA[<blockquote><p>Simply put, there’s almost no code worse than no code.</p></blockquote>

<p>&#8211;David Eisinger, Viget Labs</p>
]]></content>
  </entry>
  
</feed>
