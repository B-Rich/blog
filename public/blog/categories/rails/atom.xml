<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: rails | Nicolás Hock Isaza]]></title>
  <link href="http://blog.nhocki.com/blog/categories/rails/atom.xml" rel="self"/>
  <link href="http://blog.nhocki.com/"/>
  <updated>2013-01-25T14:08:58-05:00</updated>
  <id>http://blog.nhocki.com/</id>
  <author>
    <name><![CDATA[Nicolás Hock Isaza]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Using Liquid `include` with DB templates]]></title>
    <link href="http://blog.nhocki.com/2012/09/05/using-liquid-include-with-db-templates/"/>
    <updated>2012-09-05T17:37:00-04:00</updated>
    <id>http://blog.nhocki.com/2012/09/05/using-liquid-include-with-db-templates</id>
    <content type="html"><![CDATA[<p>I am working on a new application that will use some <a href="http://liquidmarkup.org/" title="Liquid Markup">Liquid</a> templates to
allow our clients to edit some templates.</p>

<p>We will store these templates in the Database, load them, parse them and render
them. So far, no magic.</p>

<p>But, I needed to have some &quot;partials&quot; for these. I wanted some common elements
(like image galleries) to be available for the client to use in that specific
template.</p>

<p>The way you normally accomplish this is by using an <code>include</code> tag, but I needed
a little bit more control. Not all the clients will have the same partials and
I also wanted the clients to be able to edit these partials.</p>

<p>So after reading the <a href="https://github.com/Shopify/liquid/blob/master/lib/liquid/tags/include.rb#L49-61" title="Liquid include source code">Liquid source code</a>, I found a really easy way to do
this.</p>

<p>You just need an object that responds to <code>read_template_file</code> and it can take
1 or 2 arguments (please, go for 2). This method must return the Liquid <strong>source</strong>
of the partial (not a parsed template).</p>

<p>So, here&#39;s a really simple one that will work:</p>

<p><div><script src='https://gist.github.com/3645632.js?file='></script>
<noscript><pre><code># Class to be used as a Liquid File System for the `include` tag
class LiquidTemplateSystem
  attr_reader :user

  def initialize(user)
    @user = user
  end

  # Return a valid liquid template string
  def read_template_file(template_path, context)
    user.partials.find_by_name(template_path).liquid_source
  end
end


# In the view:
# This `template` has an {% include %} tag.
&lt;%= template.render(obj, registers: LiquidTemplateSystem.new(user)) %&gt;</code></pre></noscript></div>
</p>

<h2 id="toc_21">Default FileSystem</h2>

<p>You could also set the default <code>FileSystem</code> with
<code>Liquid::Template.file_system = MyNewFileSystem.new</code>. This may be useful if you
want the partials to be shared on the database but not different for every user.</p>

<h2 id="toc_22">Any other way?</h2>

<p>Even though I find this to be <em>really</em> easy, another way may exist. If you know
of a better way to do this, please <a href="https://twitter.com/nhocki">let me know</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Mixing Presenters and Helpers]]></title>
    <link href="http://blog.nhocki.com/2012/05/08/mixing-presenters-and-helpers/"/>
    <updated>2012-05-08T18:28:00-04:00</updated>
    <id>http://blog.nhocki.com/2012/05/08/mixing-presenters-and-helpers</id>
    <content type="html"><![CDATA[<p>I just finished <a href="http://pragprog.com/book/warv/the-rails-view">The Rails View</a> and the best chapter for me was about presenters. I&#39;ve been <a href="http://blog.nhocki.com/2012/01/31/thoughts-on-decorators-and-presenters/">working with this</a> for a while and I have to admit I love the approach presented on the view.</p>

<p>All the presenters I&#39;ve done were <a href="http://blog.nhocki.com/2012/01/10/simple-presenters--decorators-on-rails/">instantiated in the controller</a>. In the book they suggest that <strong>if the presenter doesn&#39;t depend on params or session variables it&#39;s the view responsibility to create it</strong>. This is extremely flexible specially when we&#39;re presenting various objects on the same view. Here&#39;s an example to present users in our application, let&#39;s use the same presenter for the <em>index</em> and <em>show</em> actions, but let&#39;s make it in a really simple way!</p>

<h3 id="toc_23">The Helper &amp; View</h3>

<p>Let&#39;s create the helper method first. It&#39;s really simple and will take a block that we can use to build a custom markup &quot;on the fly&quot;.</p>

<p><div><script src='https://gist.github.com/2640442.js?file=user_helpers.rb'></script>
<noscript><pre><code># app/helpers/user_helpers.rb
def basic_information_for(user = @user, options = {})
  presenter = UserBasicPresenter.new(user, self, options)
  if block_given?
    yield(presenter)
  else
    presenter
  end
end</code></pre></noscript></div>
</p>

<p>Now, let&#39;s take a look at the views. In the <strong>show</strong> action, we&#39;re going to present only one user, and we can easily build the custom view for this. In the <strong>index</strong> action, we&#39;ll present all a &quot;basic info&quot; for the each user. We have that in a partial because this is used for all the collections of users in our application. Here&#39;s the view code:</p>

<p><div><script src='https://gist.github.com/2640442.js?file=user_views.html.erb'></script>
<noscript><pre><code># app/views/show.html.erb
&lt;% basic_information_for do |user|  %&gt;
  &lt;p&gt;&lt;%= user.name %&gt;&lt;/p&gt;
  &lt;p&gt;&lt;%= user.status %&gt;&lt;/p&gt;
  ...
&lt;% end %&gt;

# app/views/index.html
&lt;% @users.each do |user| %&gt;
  &lt;%= basic_information_for(user) %&gt;
&lt;% end %&gt;</code></pre></noscript></div>
</p>

<h3 id="toc_24">The Presenter, A.K.A What&#39;s happening here?</h3>

<p>What makes this <strong>really</strong> clean is that we can actually use <code>&lt;%=  %&gt;</code> directly on our helper method. This works because we&#39;ll define the <code>to_s</code> method in our presenter! In this method we <strong>render our partial in the context of the helper</strong>, which is amazing. Here&#39;s the code for that:</p>

<p><div><script src='https://gist.github.com/2640442.js?file=user_basic_presenter.rb'></script>
<noscript><pre><code># app/presenters/user_basic_presenter.rb
class UserBasicPresenter
  def initialize(user, template, options = {})
    @user     = user
    @options  = options
    @template = template
  end

  # more methods ...

  def to_s
    @template.render partial: 'user/basic', object: self
  end
end</code></pre></noscript></div>
</p>

<p>Is <strong>that</strong> simple! We have a unique interface (the helper) that will work great in both places! We could obviously make the presenter more complex, otherwise, why use it?</p>

<p>Even though I haven&#39;t used this approach a lot, I&#39;m really happy with it. I felt the difference instantly and it made a lot of sense to me. Being able to mix this with a <a href="http://blog.nhocki.com/2012/03/29/flexible-and-friendly-layouts-on-rails/">flexible layout</a> is really powerful!</p>

<h3 id="toc_25">Feedback</h3>

<p>I&#39;m also really interested in how people are using presenters. I&#39;d love to gain more feedbacks and points of view about this. Feel free to post a comment (here on in the gist) or ping me on Twitter, <a href="https://twitter.com/nhocki">@nhocki</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Flexible and friendly layouts on rails]]></title>
    <link href="http://blog.nhocki.com/2012/03/29/flexible-and-friendly-layouts-on-rails/"/>
    <updated>2012-03-29T23:16:00-04:00</updated>
    <id>http://blog.nhocki.com/2012/03/29/flexible-and-friendly-layouts-on-rails</id>
    <content type="html"><![CDATA[<p>I&#39;ve been working on a &quot;new&quot; project (I&#39;m new to the project, the project itself is &#39;old&#39;) and at the beginning I had to edit a bunch of stuff in the views.</p>

<p>A friend needed to change the header of the page on <strong>one</strong> action of the <code>UsersController</code>. He is new to rails and was struggling with this, so he asked me for help.</p>

<p>It&#39;s pretty common to have a <code>header</code> partial rendered on the view. If you&#39;re a lovely developer you would have <code>render &quot;header&quot;</code> and not something like <code>render &quot;layouts/header&quot;</code>. The reason behind this is simple. <a href="http://railscasts.com/episodes/269-template-inheritance" title="Railscasts Template Inheritance">Template Inheritance</a>. This means that if you&#39;re working on the <code>UsersController</code>, when rails looks for the <code>header</code> partial, it will first look for <code>users/header</code> moving up the parents chain, ending in <code>application/header</code>. So, next time, put all your <em>layout</em> stuff in <code>application/_partial</code> so you can easily override it!</p>

<p>But this is a <em>controller wide</em> solution, since all the actions from that controller will render the same partial. So, how do you achieve this on a single action? My solution is a 3 line helper:</p>

<p><div><script src='https://gist.github.com/2246251.js?file=application_helper.rb'></script>
<noscript><pre><code># This method will allow a section to be rendered form a view or
# to render a partial instead.
# 
# It's really useful to have 'flexible' sections in the layout. E.g
# add this to your layout file:
#
# content_or_partial(:header)
#   =&gt; renders the content_for(:header) or the &quot;header&quot; partial
#
# content_or_partial(:header, 'users/hello')
#   =&gt; renders the content_for(:header) or the &quot;users/hello&quot; partial
#
# application.html.erb
#   &lt;header class=&quot;main-header wrapper&quot;&gt;&lt;%= content_or_partial(:header) %&gt;&lt;/header&gt;
#
# users/show.html.erb
#   &lt;%= content_for :header do %&gt;
#     My action specific content
#   &lt;% end %&gt;
#
def content_or_partial(content, partial = content)
  content_for?(content) ? content_for(content) : render(partial.to_s)
end</code></pre></noscript></div>
</p>

<p>Now all you have to do is fill your layouts with &quot;content boxes&quot; that can be changed on an controller or action-specific need, giving great flexibility.</p>

<p>How would you get around this?</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Thoughts on Decorators & Presenters]]></title>
    <link href="http://blog.nhocki.com/2012/01/31/thoughts-on-decorators-and-presenters/"/>
    <updated>2012-01-31T18:12:00-05:00</updated>
    <id>http://blog.nhocki.com/2012/01/31/thoughts-on-decorators-and-presenters</id>
    <content type="html"><![CDATA[<p>I have been developing a new app using a lot of <a href="http://blog.nhocki.com/2012/01/10/simple-presenters--decorators-on-rails/">decorators and presenters</a>. I&#39;ve been highly influenced by <a href="http://about.avdi.org/">Avdi</a> (both his <a href="http://avdi.org/devblog/">blog</a> and his <a href="http://avdi.org/devblog/2011/11/15/early-access-beta-of-objects-on-rails-now-available-2/">Objects in Rails book</a>) and <a href="http://steveklabnik.com">Steve Klabnik</a>, but now I have a problem. My decorators are starting to get big. I&#39;ll have to use <code>concerns</code> for that. Expect another post about it (maybe).</p>

<p><strong>I want to warn you that I am not by any means an expert on the subject. So I&#39;m more than open to any feedback you can give me.</strong></p>

<blockquote>
<p>All presenters are decorators, but not all decorators are presenters.</p>

<p>A decorator is a class that adds some sort of functionality to another
class. A presenter is a class that adds some sort of presentation
formatting functionality to another class.</p>

<p><a href="https://groups.google.com/forum/#!msg/objects-on-rails/htAopf3k_dM/qJMq6QAfMvsJ">Steve Klabnik</a></p>
</blockquote>

<p>I think that what a decorator <em>should</em> do is give a standard API for the processed data stored somewhere (probably a database). I don&#39;t think a decorator should be in charge of the markup of the presented data. For me, it makes no sense that the decorator (that is processed data for me), knows <em>how</em> it is being shown to the user.</p>

<p>That said, I think the <strong>same</strong> decorator should be used to build the JSON response and the HTML response. The HTML markup and JSON structure are <em>just</em> \&#39;markup\&#39;. So, they can be treated as templates.</p>

<h3 id="toc_26">So, where do the logic in the template goes?</h3>

<p>I had this discussion with a <a href="http://mheroin.com/">friend</a>, and he asked me that, with this approach, how would he add elements to a view depending on a condition, for example, the famous \&#39;***You are logged in as nhocki***\&#39; if there&#39;s a user logged in.</p>

<p>I think this should be created inside helper methods that takes a block. Inside that block you can use the <strong>decorator</strong> methods to show the needed data. You can use those methods in your JSON builder too (try out the new <a href="https://github.com/rails/jbuilder">Jbuilder</a>). You could bundle up these methods and re-use them in your projects too.  </p>

<p>Here&#39;s an example:</p>

<p><div><script src='https://gist.github.com/1714913.js?file='></script>
<noscript><pre><code># app/models/user.rb
#
# User model has name &amp; username
#
# Only the username is required (signup with Github for example)
class User &lt; ActiveRecord::Base
  validates :username, presence: true
end



# app/decorators/user_decorator.rb
#
# Let's use the Draper gem for the decorators
class UserDecorator &lt; ApplicationDecorator
  decorates :user

  def display_name
    user.name.presence || user.username
  end

  # Formatting the data is OK. I'm against adding the markup
  def salary
    h.number_to_currency(user.salary)
  end
end


# app/views/users/index.html.erb

# current_user is a presenter
&lt;%= logged_in_area do %&gt;
  You are logged in as &lt;%= current_user.display_name %&gt;
&lt;% end %&gt;

# viewing @some_users's profile (which is also a presenter)
&lt;%= admin_area do %&gt;
  &lt;span class=&quot;salary&quot;&gt;&lt;%= @some_user.salary %&gt;&lt;/span&gt;
&lt;% end %&gt;


# app/helpers/application_helpers.rb
#
# We all hate helpers, but this time, they're useful.
def admin_area(&amp;block)
  content_tag(:div, capture(&amp;block), class: 'admin') if current_user.admin?
end</code></pre></noscript></div>
</p>

<h3 id="toc_27">Maybe I have the names wrong</h3>

<p>As I mentioned before, I&#39;m no expert on design patterns. And I&#39;m pretty <em>new</em> to presenters and decorators. So, maybe my approach has a different name. I don&#39;t really care how this is called, I feel it&#39;s a more natural approach and it keeps the template and the processed data in different parts.</p>

<h3 id="toc_28">Please provide feedback</h3>

<p>It is also possible that I have it all wrong, that&#39;s why I&#39;m really interested in your opinion. I&#39;m eager to learn about everything from anyone, so I would love to have some feedback about this. You can post a comment below or send me a message on <a href="http://twitter.com/nhocki">twitter</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Beautiful URLs in Rails. The easy way.]]></title>
    <link href="http://blog.nhocki.com/2012/01/22/beautiful-urls-in-rails-the-easy-way/"/>
    <updated>2012-01-22T00:00:00-05:00</updated>
    <id>http://blog.nhocki.com/2012/01/22/beautiful-urls-in-rails-the-easy-way</id>
    <content type="html"><![CDATA[<p>I&#39;ve always been in love with <a href="http://warpspire.com/posts/url-design/">beautiful URL design</a>. Specially for &#39;public&#39; parts of the site. In Rails, it&#39;s pretty common to use the ID of the object in the URL. Well, that <strong>really</strong> sucks.</p>

<p>My first approach to solve this problem was started by <a href="http://mheroin.com/">Federico Builes</a> a long time ago with a plugin (<a href="https://github.com/nhocki/make_permalink">which I now maintain</a> as a gem) called <a href="http://rubygems.org/gems/make_permalink">Make Permalink</a>. It&#39;s really easy to use and will (up to some point) solve the problem. I know <a href="http://rubygems.org/gems/friendly_id">FriendlyID</a> exists, but I <em>hate</em> having the permalink field in my database (I <em>always</em> forget it) so that&#39;s why I like Make Permalink&#39;s approach.</p>

<p><div><script src='https://gist.github.com/1660555.js?file=make_permalink_example.rb'></script>
<noscript><pre><code>class Post &lt; ActiveRecord::Base
  make_permalink :title

  # Override this method to have nice looking
  # URLs. You still use `Post.find` in the controller
  # and will get URL like this:
  #
  #    /posts/1-look-mom-i-rock
  def to_param
    permalink
  end
end
</code></pre></noscript></div>
</p>

<p>The good thing about having <code>/users/1-nhocki</code> as the URL is that is way better than <code>/users/1</code> <strong>AND</strong> you don&#39;t have to change any of your app for that (you can still use <code>find</code> in your controllers).</p>

<p>I was really glad with this but not too long ago, someone asked me for something similar but for Mongoid. And hell! Mongoid ids are ugly as shit! So, they wanted to have <em><strong>just</strong></em> the username. I said, well, why don&#39;t you just change the <code>to_param</code> method to return the username and use <code>User.find_by_username</code> everywhere?</p>

<p>Even though this actually works, I would be very tired from writing <code>find_by_username</code> over and over again. So I told him to write a <code>fetch</code> method where he could get an user either by the <code>id</code> or the <code>username</code>. I think this is pretty convenient and nice, but I would <em><strong>hate</strong></em> to write that fetch method in every model. So, with some metaprogramming we can easily do this.</p>

<p>First, I&#39;ve created a <code>fetchable_on</code> method to use it in your models. This will define a class method called <code>fetch</code> that will let you get the object by querying on the <code>attribute</code> <strong>OR</strong> on the <code>id</code>. Right now, it won&#39;t work if your attribute is a numeric value (like the number of bathrooms you have in your house), but most of the times, it&#39;s ok. Here&#39;s the code. Place it in your initializers folder.</p>

<p><div><script src='https://gist.github.com/1657758.js?file='></script>
<noscript><pre><code># config/initializers/fetchable.rb

# encoding: UTF-8

module Extensions
  module Fetchable
    # Adding `fetchable_on` to a model will define the `fetch` method
    # that will allow you to query that model with the `attribute` or `id`.
    #
    # Having the following:
    #
    #    class User &lt;&lt; ActiveRecord::Base
    #      fetchable_on :username
    #    end
    #
    # Will let you fetch users by username or id.
    #
    #    User.fetch('nhocki').id # =&gt; 1
    #    User.fetch(1).username # =&gt; nhocki
    def fetchable_on(attribute)
      define_singleton_method(&quot;fetch&quot;) do |*args|
        looked_value = args.shift
        begin
          find(looked_value.to_i, *args)
        rescue ActiveRecord::RecordNotFound
          send(&quot;find_by_#{attribute}!&quot;, looked_value.to_s, *args)
        end
      end
    end
  end
end

ActiveRecord::Base.extend(Extensions::Fetchable)</code></pre></noscript></div>
</p>

<p>That way, you just need to call <code>fetchable_on :attribute</code> in your model and it&#39;ll adjust the <code>fetch</code> method to query on that <code>attribute</code> or the <code>id</code>. Here&#39;s an example:</p>

<p><div><script src='https://gist.github.com/1660555.js?file=fetchable_example.rb'></script>
<noscript><pre><code>class User &lt; ActiveRecord::Base
  fetchable_on :username

  # URL Style: /users/nhocki
  def to_param
    username
  end
end

# Gives you the `fetch` method.
# It takes the username or the id.
# Use fetch in your controller

User.fetch('nhocki').id # =&gt; 1
User.fetch(1).username  # =&gt; 'nhocki'
</code></pre></noscript></div>
</p>

<p><strong>Note that I use <code>find_by_attribute!</code> to throw an exception if the object is not found. Using the method without a <code>!</code> will return <code>nil</code> if there&#39;s no object in the DB.</strong></p>

<p>How would you implement this? Any good solutions?</p>
]]></content>
  </entry>
  
</feed>
