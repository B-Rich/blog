<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: rails | Nicolás Hock Isaza]]></title>
  <link href="http://blog.nhocki.com/blog/categories/rails/atom.xml" rel="self"/>
  <link href="http://blog.nhocki.com/"/>
  <updated>2012-01-31T23:08:36-05:00</updated>
  <id>http://blog.nhocki.com/</id>
  <author>
    <name><![CDATA[Nicolás Hock Isaza]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Thoughts on Decorators & Presenters]]></title>
    <link href="http://blog.nhocki.com/2012/01/31/thoughts-on-decorators-and-presenters/"/>
    <updated>2012-01-31T18:12:00-05:00</updated>
    <id>http://blog.nhocki.com/2012/01/31/thoughts-on-decorators-and-presenters</id>
    <content type="html"><![CDATA[<p>I have been developing a new app using a lot of <a href="http://blog.nhocki.com/2012/01/10/simple-presenters--decorators-on-rails/">decorators and presenters</a>. I've been highly influenced by <a href="http://about.avdi.org/">Avdi</a> (both his <a href="http://avdi.org/devblog/">blog</a> and his <a href="http://avdi.org/devblog/2011/11/15/early-access-beta-of-objects-on-rails-now-available-2/">Objects in Rails book</a>) and <a href="http://steveklabnik.com">Steve Klabnik</a>, but now I have a problem. My decorators are starting to get big. I'll have to use <code>concerns</code> for that. Expect another post about it (maybe).</p>

<p><strong>I want to warn you that I am (by any means) an expert on the subject. So I'm more than open to any feedback you can give me.</strong></p>

<blockquote><p>All presenters are decorators, but not all decorators are presenters.</p>

<p>A decorator is a class that adds some sort of functionality to another
class. A presenter is a class that adds some sort of presentation
formatting functionality to another class.</p></blockquote>

<p>(<a href="https://groups.google.com/forum/#!msg/objects-on-rails/htAopf3k_dM/qJMq6QAfMvsJ">Source</a>)</p>

<p>I think that what a decorator <em>should</em> do is give a standard API for the processed data stored somewhere (probably a database). I don't think a decorator should be in charge of the markup of the presented data. For me, it makes no sense that the decorator (that is processed data for me), knows <em>how</em> it is being shown to the user.</p>

<p>That said, I think the <strong>same</strong> decorator should be used to build the JSON response and the HTML response. The HTML markup and JSON structure are <em>just</em> \'markup\'. So, they can be treated as templates.</p>

<h3>So, where do the logic in the template goes?</h3>

<p>I had this discussion with a <a href="http://mheroin.com/">friend</a>, and he asked me that, with this approach, how would he add elements to a view depending on a condition, for example, the famous \'<strong><em>You are logged in as nhocki</em></strong>\' if there's a user logged in.</p>

<p>I think this should be created inside helper methods that takes a block. Inside that block you can use the <strong>decorator</strong> methods to show the needed data. You can use those methods in your JSON builder too (try out the new <a href="https://github.com/rails/jbuilder">Jbuilder</a>). You could bundle up these methods and re-use them in your projects too.</p>

<p>Here's an example:</p>

<p><div><script src='https://gist.github.com/1714913.js?file='></script>
<noscript><pre><code># app/models/user.rb
#
# User model has name &amp; username
#
# Only the username is required (signup with Github for example)
class User &lt; ActiveRecord::Base
  validates :username, presence: true
end



# app/decorators/user_decorator.rb
#
# Let's use the Draper gem for the decorators
class UserDecorator &lt; ApplicationDecorator
  decorates :user

  def display_name
    user.name.presence || user.username
  end

  # Formatting the data is OK. I'm against adding the markup
  def salary
    h.number_to_currency(user.salary)
  end
end


# app/views/users/index.html.erb

# current_user is a presenter
&lt;%= logged_in_area do %&gt;
  You are logged in as &lt;%= current_user.display_name %&gt;
&lt;% end %&gt;

# viewing @some_users's profile (which is also a presenter)
&lt;%= admin_area do %&gt;
  &lt;span class=&quot;salary&quot;&gt;&lt;%= @some_user.salary %&gt;&lt;/span&gt;
&lt;% end %&gt;


# app/helpers/application_helpers.rb
#
# We all hate helpers, but this time, they're useful.
def admin_area(&amp;block)
  content_tag :div, capture(&amp;block), class: 'admin'
end</code></pre></noscript></div>
</p>

<h3>Maybe I have the names wrong</h3>

<p>As I mentioned before, I'm no expert on design patterns. And I'm pretty <em>new</em> to presenters and decorators. So, maybe my approach has a different name. I don't really care how this is called, I feel it's a more natural approach and it keeps the template and the processed data in different parts.</p>

<h3>Please provide feedback</h3>

<p>It is also possible that I have it all wrong, that's why I'm really interested in your opinion. I'm eager to learn about everything from anyone, so I would love to have some feedback about this. You can post a comment below or send me a message on <a href="http://twitter.com/nhocki">twitter</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Beautiful URLs in Rails. The easy way.]]></title>
    <link href="http://blog.nhocki.com/2012/01/22/beautiful-urls-in-rails-the-easy-way/"/>
    <updated>2012-01-22T00:00:00-05:00</updated>
    <id>http://blog.nhocki.com/2012/01/22/beautiful-urls-in-rails-the-easy-way</id>
    <content type="html"><![CDATA[<p>I've always been in love with <a href="http://warpspire.com/posts/url-design/">beautiful URL design</a>. Specially for 'public' parts of the site. In Rails, it's pretty common to use the ID of the object in the URL. Well, that <strong>really</strong> sucks.</p>

<p>My first approach to solve this problem was started by <a href="http://mheroin.com/">Federico Builes</a> a long time ago with a plugin (<a href="https://github.com/nhocki/make_permalink">which I now maintain</a> as a gem) called <a href="http://rubygems.org/gems/make_permalink">Make Permalink</a>. It's really easy to use and will (up to some point) solve the problem. I know <a href="http://rubygems.org/gems/friendly_id">FriendlyID</a> exists, but I <em>hate</em> having the permalink field in my database (I <em>always</em> forget it) so that's why I like Make Permalink's approach.</p>

<p><div><script src='https://gist.github.com/1660555.js?file=make_permalink_example.rb'></script>
<noscript><pre><code>class Post &lt; ActiveRecord::Base
  make_permalink :title

  # Override this method to have nice looking
  # URLs. You still use `Post.find` in the controller
  # and will get URL like this:
  #
  #    /posts/1-look-mom-i-rock
  def to_param
    permalink
  end
end
</code></pre></noscript></div>
</p>

<p>The good thing about having <code>/users/1-nhocki</code> as the URL is that is way better than <code>/users/1</code> <strong>AND</strong> you don't have to change any of your app for that (you can still use <code>find</code> in your controllers).</p>

<p>I was really glad with this but not too long ago, someone asked me for something similar but for Mongoid. And hell! Mongoid ids are ugly as shit! So, they wanted to have <em><strong>just</strong></em> the username. I said, well, why don't you just change the <code>to_param</code> method to return the username and use <code>User.find_by_username</code> everywhere?</p>

<p>Even though this actually works, I would be very tired from writing <code>find_by_username</code> over and over again. So I told him to write a <code>fetch</code> method where he could get an user either by the <code>id</code> or the <code>username</code>. I think this is pretty convenient and nice, but I would <em><strong>hate</strong></em> to write that fetch method in every model. So, with some metaprogramming we can easily do this.</p>

<p>First, I've created a <code>fetchable_on</code> method to use it in your models. This will define a class method called <code>fetch</code> that will let you get the object by querying on the <code>attribute</code> <strong>OR</strong> on the <code>id</code>. Right now, it won't work if your attribute is a numeric value (like the number of bathrooms you have in your house), but most of the times, it's ok. Here's the code. Place it in your initializers folder.</p>

<p><div><script src='https://gist.github.com/1657758.js?file='></script>
<noscript><pre><code># config/initializers/fetchable.rb

# encoding: UTF-8

module Extensions
  module Fetchable
    # Adding `fetchable_on` to a model will define the `fetch` method
    # that will allow you to query that model with the `attribute` or `id`.
    #
    # Having the following:
    #
    #    class User &lt;&lt; ActiveRecord::Base
    #      fetchable_on :username
    #    end
    #
    # Will let you fetch users by username or id.
    #
    #    User.fetch('nhocki').id # =&gt; 1
    #    User.fetch(1).username # =&gt; nhocki
    def fetchable_on(attribute)
      define_singleton_method(&quot;fetch&quot;) do |*args|
        looked_value = args.shift
        begin
          find(looked_value.to_i, *args)
        rescue ActiveRecord::RecordNotFound
          send(&quot;find_by_#{attribute}!&quot;, looked_value.to_s, *args)
        end
      end
    end
  end
end

ActiveRecord::Base.extend(Extensions::Fetchable)</code></pre></noscript></div>
</p>

<p>That way, you just need to call <code>fetchable_on :attribute</code> in your model and it'll adjust the <code>fetch</code> method to query on that <code>attribute</code> or the <code>id</code>. Here's an example:</p>

<p><div><script src='https://gist.github.com/1660555.js?file=fetchable_example.rb'></script>
<noscript><pre><code>class User &lt; ActiveRecord::Base
  fetchable_on :username

  # URL Style: /users/nhocki
  def to_param
    username
  end
end

# Gives you the `fetch` method.
# It takes the username or the id.
# Use fetch in your controller

User.fetch('nhocki').id # =&gt; 1
User.fetch(1).username  # =&gt; 'nhocki'
</code></pre></noscript></div>
</p>

<p><strong>Note that I use <code>find_by_attribute!</code> to throw an exception if the object is not found. Using the method without a <code>!</code> will return <code>nil</code> if there's no object in the DB.</strong></p>

<p>How would you implement this? Any good solutions?</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Simple Presenters & Decorators on Rails]]></title>
    <link href="http://blog.nhocki.com/2012/01/10/simple-presenters--decorators-on-rails/"/>
    <updated>2012-01-10T00:00:00-05:00</updated>
    <id>http://blog.nhocki.com/2012/01/10/simple-presenters--decorators-on-rails</id>
    <content type="html"><![CDATA[<p>There's been a <a href="http://blog.steveklabnik.com/posts/2011-09-06-the-secret-to-rails-oo-design">lot</a> of <a href="http://blog.steveklabnik.com/posts/2011-09-09-better-ruby-presenters">talk</a> <a href="http://avdi.org/devblog/2011/11/15/early-access-beta-of-objects-on-rails-now-available-2/">about</a><a href="http://robots.thoughtbot.com/post/14825364877/evaluating-alternative-decorator-implementations-in">decorators</a> and <a href="http://robots.thoughtbot.com/post/13641910701/tidy-views-and-beyond-with-decorators">presenters</a> (<a href="https://groups.google.com/forum/#!msg/objects-on-rails/htAopf3k_dM/qJMq6QAfMvsJ">which are almost the same</a>) in Rails and how they help you with a "real" OO code. There are great gems and there's even a <a href="http://railscasts.com/episodes/287-presenters-from-scratch">Railscast</a> (pro) on how to build a presenter from scratch. But, in the new project I'm working on, we (&lt;- <a href="https://github.com/febuiles">he</a>) has this <strong>really</strong> simple setup which I feel kind of cleaner.</p>

<p>What we wanted to have was a <code>present</code> method in the controller and build the view from its methods. So, we created an <a href="http://api.rubyonrails.org/classes/ActiveSupport/Concern.html">ActiveSupport::Concern</a> called <code>Presentable</code> and included it in our application controller. Here's our (once again, his) code for that module.</p>

<p><div><script src='https://gist.github.com/1592754.js?file=presentable.rb'></script>
<noscript><pre><code># app/concerns/controllers/presentable.rb

# Presentable Concern
# Include this module in the controllers where
# you need the `present` method.
module Presentable
  # This method returns a Presenter Object to work
  # with in the view.
  #
  # Attributes:
  #   object:   The object to present
  #
  # Supported Options
  #    as:   The presenter class. If this is not suplied 
  #          the method will try to guess the class
  #          e.g: UserPresenter for a User object.
  def present(object, options = { })
    if object.respond_to?(:first)
      return [] if object.empty?
      presenter = &quot;#{object.first.class.to_s.pluralize}Presenter&quot;
    else
      presenter = &quot;#{object.class}Presenter&quot;
    end

    presenter = options.fetch(:as) { eval(presenter) }
    presenter.new(object)
  end
end
</code></pre></noscript></div>
</p>

<p>Now, we just need to create each presenter. But, since there's a lot of shared logic between presenters we (he) just created a parent <code>Presenter class</code> with all that. Notice that our presenter takes an object as parameter, so we just delegated all the method calls to our record (thank you <code>method missing</code>) if it responded to that method. You could also send the view context to access Rails helpers inside your presenter. Here's our <code>Presenter base class</code>.</p>

<p><div><script src='https://gist.github.com/1592754.js?file=presenter.rb'></script>
<noscript><pre><code># Base presenter class
# All presenters should inherit from this one.
class Presenter
  # Include all the modules you need or
  # send the view context to access rails helpers.
  include Rails.application.routes.url_helpers
  # ...

  include Presentable

  attr_reader :record

  def initialize(record)
    @record = record
    @klass = record.class
  end

  def method_missing(name, *arguments, &amp;block)
    super unless record.respond_to?(name)
    record.send(name, *arguments, &amp;block)
  end

  def translate_field_name(name)
    @klass.human_attribute_name(name)
  end

  # UrlHelper was being an ass, easier to go commando.
  def link_to(name, url, options={})
    href = { :href =&gt; url }
    content_tag(:a, name, options.merge(href))
  end
end
</code></pre></noscript></div>
</p>

<p>Then, we just need to inherit from the <code>Presenter</code> class and add our custom, clean methods. Using <code>delegate and method missing</code> will help us keep the class clean. I won't show you a presenter here, they'll look a lot like Ryan's one in his Railscasts so check that out first.</p>

<p>I will show you our controller though. Using the decent_exposure gem we managed to get super tiny controllers. Here's 1 of them:</p>

<p><div><script src='https://gist.github.com/1592754.js?file=requests_controller.rb'></script>
<noscript><pre><code>class RequestsController &lt; ApplicationController
  expose(:filter) { params.fetch(:filter) { :all} }
  expose(:filtered_requests) { Request.filter(filter) }
  expose(:requests) { present(filtered_requests) }

  before_filter :find_request, :only =&gt; [:show, :destroy]

  def index
  end

  def show
    extend(RequestRedirector) # Another concern
    redirect_to_request
  end

  def destroy
    @request.destroy
    redirect_to requests_path(:filter =&gt; &quot;new_requests&quot;), :notice =&gt; &quot;Se ha eliminado la solicitud&quot;
  end

  private
  def find_request
    @request = Request.find(params[:id])
  end
end
</code></pre></noscript></div>
</p>

<p>Combining <code>presenters</code> and <code>form builders</code> will make your views even cleaner, giving a lot of pleasure to the future you! So please, just pretty-please, start using presenters and builders and leave helpers as simple as possible. Or, leave them for good.</p>

<p>You'll be amazed how different you'll feel when reading some old code or some co-worker's code.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Colorize your rake output]]></title>
    <link href="http://blog.nhocki.com/2011/11/30/colorize-your-rake-output/"/>
    <updated>2011-11-30T00:00:00-05:00</updated>
    <id>http://blog.nhocki.com/2011/11/30/colorize-your-rake-output</id>
    <content type="html"><![CDATA[<p>I've been writing a lot of rake tasks lately. I like to have a lot of output (feedback) from my tasks, at least while I'm writing them. I have colors in my tests, but my output is really ugly, so I took <a href="https://github.com/andmej/chatte/blob/master/client.rb#L15-24">some code</a> from <a href="https://github.com/andmej/chatte/">Chatte</a>, - a simple chat application a <a href="http://andr.esmejia.com/">friend</a> (and awesome <a href="https://github.com/andmej/">developer</a>, btw) wrote for college- and made some modifications for it. Here's my module right now…</p>

<p><div><script src='https://gist.github.com/1410582.js?file='></script>
<noscript><pre><code>module Colors
  def colorize(text, color_code)
    &quot;\033[#{color_code}m#{text}\033[0m&quot;
  end

  {
    :black    =&gt; 30,
    :red      =&gt; 31,
    :green    =&gt; 32,
    :yellow   =&gt; 33,
    :blue     =&gt; 34,
    :magenta  =&gt; 35,
    :cyan     =&gt; 36,
    :white    =&gt; 37
  }.each do |key, color_code|
    define_method key do |text|
      colorize(text, color_code)
    end
  end
end

# green &quot;Hello&quot;
#   =&gt; &quot;\e[32mHello\e[0m&quot;</code></pre></noscript></div>
</p>

<p>Now, you just need to <code>include Colors</code> in your tasks and enjoy your life.</p>

<p>I know there's a <a href="https://github.com/fazibear/colorize">colorize</a> gem out there, but I don't like their syntax. I prefer Andres' approach much more, so maybe I'll turn this into a really simple gem. Do you think it's worth it?</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Compile assets and push them - no pain involved!]]></title>
    <link href="http://blog.nhocki.com/2011/09/28/compile-assets-and-push-them---no-pain-involved/"/>
    <updated>2011-09-28T00:00:00-04:00</updated>
    <id>http://blog.nhocki.com/2011/09/28/compile-assets-and-push-them---no-pain-involved</id>
    <content type="html"><![CDATA[<p>This week, I've been working on a side project with <a href="http://andr.esmejia.com/">Andrés
Mejía</a> (<a href="http://twitter.com/andmej">@andmej</a>) and
for some really really sad reason <a href="http://heroku.com">Heroku</a> is not working
as expected (a simple git push should do the trick, but we're having a really
<a href="https://github.com/ddollar/rails_log_stdout/issues/4">weird issue</a>).</p>

<p>At first, I thought it had something to do with the assets. Even-though
<a href="http://heroku.com">Heroku</a> has <a href="h%0Attp://devcenter.heroku.com/articles/rails31_heroku_cedar#the_asset_pipeline">asset compiling tasks on their Cedar stack</a>,
it didn't really worked for us at first. So I just decided to create a small
rake task to compile the assets and push them to Github.</p>

<p>The good thing about this rake task is that it will only push the assets. This
means, that <strong>you'll need a clean git tree to run this task or it will die</strong>.
This ensures that the automatic push <strong>won't commit any non-related change to
the compilation of the assets</strong>.</p>

<p>Now, you only have to run <strong>rake assets:compile</strong> and sleep well at night.
Here's the code. Hope it helps.</p>

<p><div><script src='https://gist.github.com/1241135.js?file='></script>
<noscript><pre><code>namespace :assets do
  desc &quot;Compile all the assets named in config.assets.precompile and push them&quot;
  task :compile do
    AssetsCompiler.new.compile
  end

  class AssetsCompiler
    def compile
      ensure_clean_git
      removed_previous_assets
      compile_assets
      commit_compiled_assets
      push
    end

    def ensure_clean_git
      raise &quot;Can't deploy without a clean git status.&quot; if git_dirty?
    end

    def removed_previous_assets
      run &quot;bundle exec rake RAILS_ENV=production assets:clean&quot;
    end

    def compile_assets
      run &quot;bundle exec rake RAILS_ENV=production assets:precompile&quot;
    end

    def commit_compiled_assets
      run &quot;git add -u &amp;&amp; git add . &amp;&amp; git commit -am 'Compiled assets'&quot;
    end

    def push
      run &quot;git push&quot;
    end

    private

    def run(command)
      puts &quot;+ Running: #{command}&quot;
      puts &quot;-- #{system command}&quot;
    end

    def git_dirty?
      `[[ $(git diff --shortstat 2&gt; /dev/null | tail -n1) != &quot;&quot; ]]`
      dirty = $?.success?
    end
  end
end</code></pre></noscript></div>
</p>
]]></content>
  </entry>
  
</feed>
