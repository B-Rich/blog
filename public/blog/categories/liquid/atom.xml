<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: liquid | Nicolás Hock Isaza]]></title>
  <link href="http://blog.nhocki.com/blog/categories/liquid/atom.xml" rel="self"/>
  <link href="http://blog.nhocki.com/"/>
  <updated>2013-02-05T14:58:34-05:00</updated>
  <id>http://blog.nhocki.com/</id>
  <author>
    <name><![CDATA[Nicolás Hock Isaza]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Using Liquid `include` with DB templates]]></title>
    <link href="http://blog.nhocki.com/2012/09/05/using-liquid-include-with-db-templates/"/>
    <updated>2012-09-05T17:37:00-04:00</updated>
    <id>http://blog.nhocki.com/2012/09/05/using-liquid-include-with-db-templates</id>
    <content type="html"><![CDATA[<p>I am working on a new application that will use some <a href="http://liquidmarkup.org/" title="Liquid Markup">Liquid</a> templates to
allow our clients to edit some templates.</p>

<p>We will store these templates in the Database, load them, parse them and render
them. So far, no magic.</p>

<p>But, I needed to have some &quot;partials&quot; for these. I wanted some common elements
(like image galleries) to be available for the client to use in that specific
template.</p>

<p>The way you normally accomplish this is by using an <code>include</code> tag, but I needed
a little bit more control. Not all the clients will have the same partials and
I also wanted the clients to be able to edit these partials.</p>

<p>So after reading the <a href="https://github.com/Shopify/liquid/blob/master/lib/liquid/tags/include.rb#L49-61" title="Liquid include source code">Liquid source code</a>, I found a really easy way to do
this.</p>

<p>You just need an object that responds to <code>read_template_file</code> and it can take
1 or 2 arguments (please, go for 2). This method must return the Liquid <strong>source</strong>
of the partial (not a parsed template).</p>

<p>So, here&#39;s a really simple one that will work:</p>

<p><div><script src='https://gist.github.com/3645632.js?file='></script>
<noscript><pre><code># Class to be used as a Liquid File System for the `include` tag
class LiquidTemplateSystem
  attr_reader :user

  def initialize(user)
    @user = user
  end

  # Return a valid liquid template string
  def read_template_file(template_path, context)
    user.partials.find_by_name(template_path).liquid_source
  end
end


# In the view:
# This `template` has an {% include %} tag.
&lt;%= template.render(obj, registers: LiquidTemplateSystem.new(user)) %&gt;</code></pre></noscript></div>
</p>

<h2 id="toc_52">Default FileSystem</h2>

<p>You could also set the default <code>FileSystem</code> with
<code>Liquid::Template.file_system = MyNewFileSystem.new</code>. This may be useful if you
want the partials to be shared on the database but not different for every user.</p>

<h2 id="toc_53">Any other way?</h2>

<p>Even though I find this to be <em>really</em> easy, another way may exist. If you know
of a better way to do this, please <a href="https://twitter.com/nhocki">let me know</a>.</p>
]]></content>
  </entry>
  
</feed>
