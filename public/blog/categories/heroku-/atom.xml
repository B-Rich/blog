<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: heroku, | Nicolás Hock Isaza]]></title>
  <link href="http://blog.nhocki.com/blog/categories/heroku-/atom.xml" rel="self"/>
  <link href="http://blog.nhocki.com/"/>
  <updated>2012-01-31T23:11:21-05:00</updated>
  <id>http://blog.nhocki.com/</id>
  <author>
    <name><![CDATA[Nicolás Hock Isaza]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Transfer data from one Heroku app to another]]></title>
    <link href="http://blog.nhocki.com/2011/07/20/transfer-data-from-one-heroku-app-to-another/"/>
    <updated>2011-07-20T00:00:00-04:00</updated>
    <id>http://blog.nhocki.com/2011/07/20/transfer-data-from-one-heroku-app-to-another</id>
    <content type="html"><![CDATA[<p>Today I needed to transfer all the data from one application (production
environment) to another (staging environment).</p>

<p>I'm pretty aware that the <a href="https://rubygems.org/gems/taps">taps gem</a> exists
(which is great btw, and I use to pull the data from the production
environment to my development environment), but the problem with the taps gem
is that a table with a lot of data and some indexes will take a while to
migrate.</p>

<p>I guess it was my lucky day because <a href="http://thoughtbot.com/">Thoughtbot</a>
<a href="https://twitter.com/thoughtbot/status/92957355330904064">tweeted</a> with
exactly what I needed. Turns out that using the <a href="http://addons.heroku.com/pgbackups">PG Backups
addon</a> it's really easy and fast!</p>

<p><div><script src='https://gist.github.com/1089598.js?file='></script>
<noscript><pre><code>heroku addons:add pgbackups --remote staging
heroku addons:add pgbackups --remote production
heroku pgbackups:capture --remote production
heroku pgbackups:restore DATABASE `heroku pgbackups:url --remote production` --remote staging</code></pre></noscript></div>
</p>

<p>That's all you need! Those 4 lines (actually, the last 2) will backup your
production database and then restore that backup in your staging database.</p>

<p>Here is the <a href="https://gist.github.com/1089598">original gist</a>.</p>
]]></content>
  </entry>
  
</feed>
