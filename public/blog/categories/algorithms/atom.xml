<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: algorithms | Nicolás Hock Isaza]]></title>
  <link href="http://blog.nhocki.com/blog/categories/algorithms/atom.xml" rel="self"/>
  <link href="http://blog.nhocki.com/"/>
  <updated>2013-01-25T14:08:58-05:00</updated>
  <id>http://blog.nhocki.com/</id>
  <author>
    <name><![CDATA[Nicolás Hock Isaza]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Reverse a list in O(n)]]></title>
    <link href="http://blog.nhocki.com/2012/12/27/reverse-a-list-in-o-n/"/>
    <updated>2012-12-27T16:53:00-05:00</updated>
    <id>http://blog.nhocki.com/2012/12/27/reverse-a-list-in-o-n</id>
    <content type="html"><![CDATA[<p>For about a year, I&#39;ve always had a question I ask someone I&#39;m interviewing for
a programming position. I&#39;ve asked this around 3 times and got some nice
answers, but I had never implemented it. The question is really simple:</p>

<p><strong>Given a linked list, how would you reverse it in <code>O(n)</code>?</strong></p>

<p>Here&#39;s my solution:</p>

<p><div><script src='https://gist.github.com/4392454.js?file='></script>
<noscript><pre><code>Node = Struct.new(:id, :next)

# Build the list
first = Node.new(1, nil)
nodes = 10.times.map{|x| Node.new(x + 2, nil)}
nodes.each_with_index{|node, index| node.next = nodes[index + 1] }
first.next = nodes.first

def reverse_list(node)
  prox = node.next  # Get the next node on the list.
  node.next = nil   # Make the new tail point to nil (end of the new list).

  last = node       # Save that new tail on a tmp variable (to point to it later)
  node = prox       # Change the `current` node to the `next` one. Move ahead.

  while node          # If I'm not at the end of the list.
    prox = node.next  # Save the next node on the original list.
    node.next = last  # Reverse the list (point back from `current`)
    last = node       # Save the current node to point later.
    node = prox       # Move ahead once.
  end
  last
end

def print_list(node)
  while node
    puts node.id
    node = node.next
  end
end

print_list(first)
puts &quot;\n&quot;
print_list(reverse_list(first))
</code></pre></noscript></div>
</p>

<p>How would you do it? There&#39;s a really simple solution using a queue, but if you
find another one, I&#39;d love to hear about it on
<a href="https://twitter.com/nhocki">Twitter @nhocki</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Algorithms are on the cutting edge of entrepreneurship.]]></title>
    <link href="http://blog.nhocki.com/2011/11/09/algorithms-are-on-the-cutting-edge-of-entrepreneurship/"/>
    <updated>2011-11-09T00:00:00-05:00</updated>
    <id>http://blog.nhocki.com/2011/11/09/algorithms-are-on-the-cutting-edge-of-entrepreneurship</id>
    <content type="html"><![CDATA[<blockquote>
<p>Algorithms are on the cutting edge of entrepreneurship. If you&#39;re talking
about just re-implementing stuff that people did ten years ago, performance
isn&#39;t that important at some level. But, if you&#39;re talking about doing stuff
that nobody has done before, one of the reasons often that they haven&#39;t done
it is because it&#39;s too time-consuming.</p>
</blockquote>

<p>By Charles Leiserson</p>
]]></content>
  </entry>
  
</feed>
