<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: algorithms | Nicolás Hock Isaza]]></title>
  <link href="http://blog.nhocki.com/blog/categories/algorithms/atom.xml" rel="self"/>
  <link href="http://blog.nhocki.com/"/>
  <updated>2013-03-07T21:33:07-05:00</updated>
  <id>http://blog.nhocki.com/</id>
  <author>
    <name><![CDATA[Nicolás Hock Isaza]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Tower of Hanoi with a stack]]></title>
    <link href="http://blog.nhocki.com/2013/02/05/tower-of-hanoi-with-a-stack/"/>
    <updated>2013-02-05T14:37:00-05:00</updated>
    <id>http://blog.nhocki.com/2013/02/05/tower-of-hanoi-with-a-stack</id>
    <content type="html"><![CDATA[<p>I&#39;ve recently subscribed to <a href="http://codingforinterviews.com/">Coding for Interviews</a>
and received my first email today. The content is great and you should join. 
Even if you&#39;re not looking for a job, it&#39;s a short read with nice topics to 
refresh your memory.</p>

<p><a href="http://us2.campaign-archive2.com/?u=cadc6c448cd083a0aeed7f864&amp;id=c550bc59d5&amp;e=5694567579">Today&#39;s assignment</a> was with stacks. I&#39;ve used stacks to
<a href="http://blog.nhocki.com/2012/12/27/reverse-a-list-in-o-n/">reverse a list in O(n)</a>
but today&#39;s challenge was to solve the <a href="http://en.wikipedia.org/wiki/Tower_of_Hanoi">Tower of Hanoi</a> problem without
recursion.</p>

<p>Here&#39;s my solution:</p>

<p><div><script src='https://gist.github.com/4716874.js?file='></script>
<noscript><pre><code>Hanoi = Struct.new(:disk, :source, :dest, :spare)

def move(hanoi)
  &quot;Move #{hanoi.disk.abs} from #{hanoi.source} to #{hanoi.dest}&quot;
end

class Stack
  def initialize
    @data = []
  end

  def push(hanoi)
    @data.unshift(hanoi)
  end

  def pop
    @data.shift
  end

  def peek
    @data.first
  end

  def empty?
    @data.empty?
  end
end


# Resolve the Tower of Hanoi problem with a Stack. You can't use recursion
# in it's traditional way, but adding everything to a stack works the same.
#
# Notice you have to invert the order of the calls to the recursive function
# since the stack is **Last In - First Out**.
def stacker hanoi
  stack = Stack.new
  stack.push(hanoi)

  until stack.empty? do
    hanoi = stack.pop

    if hanoi.disk &lt;= 1
      puts move(hanoi)
    else
      left  = Hanoi.new(hanoi.disk - 1, hanoi.source, hanoi.spare, hanoi.dest)
      right = Hanoi.new(hanoi.disk - 1, hanoi.spare, hanoi.dest, hanoi.source)
      hanoi.disk = -hanoi.disk # force printing it next time it appears
      stack.push right
      stack.push hanoi
      stack.push left
    end
  end
end


# Resolve the Tower of Hanoi problem with recursion.
def recursive hanoi
  if hanoi.disk == 1
    puts move(hanoi)
  else
    left  = Hanoi.new(hanoi.disk - 1, hanoi.source, hanoi.spare, hanoi.dest)
    right = Hanoi.new(hanoi.disk - 1, hanoi.spare, hanoi.dest, hanoi.source)
    recursive(left)
    puts move(hanoi)
    recursive(right)
  end
end

h = Hanoi.new(3, 'A', 'B', 'C')

recursive(h)
puts &quot;\n\n&quot;
stacker(h)
</code></pre></noscript></div>
</p>

<p>There&#39;s another iterative solution but I haven&#39;t implemented it. So, if you did
or have some other way to solve this, I&#39;d love to know on
<a href="https://twitter.com/nhocki">Twitter @nhocki</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Reverse a list in O(n)]]></title>
    <link href="http://blog.nhocki.com/2012/12/27/reverse-a-list-in-o-n/"/>
    <updated>2012-12-27T16:53:00-05:00</updated>
    <id>http://blog.nhocki.com/2012/12/27/reverse-a-list-in-o-n</id>
    <content type="html"><![CDATA[<p>For about a year, I&#39;ve always had a question I ask someone I&#39;m interviewing for
a programming position. I&#39;ve asked this around 3 times and got some nice
answers, but I had never implemented it. The question is really simple:</p>

<p><strong>Given a linked list, how would you reverse it in <code>O(n)</code>?</strong></p>

<p>Here&#39;s my solution:</p>

<p><div><script src='https://gist.github.com/4392454.js?file='></script>
<noscript><pre><code>Node = Struct.new(:id, :next)

# Build the list
first = Node.new(1, nil)
nodes = 10.times.map{|x| Node.new(x + 2, nil)}
nodes.each_with_index{|node, index| node.next = nodes[index + 1] }
first.next = nodes.first

def reverse_list(node)
  prox = node.next  # Get the next node on the list.
  node.next = nil   # Make the new tail point to nil (end of the new list).

  last = node       # Save that new tail on a tmp variable (to point to it later)
  node = prox       # Change the `current` node to the `next` one. Move ahead.

  while node          # If I'm not at the end of the list.
    prox = node.next  # Save the next node on the original list.
    node.next = last  # Reverse the list (point back from `current`)
    last = node       # Save the current node to point later.
    node = prox       # Move ahead once.
  end
  last
end

def print_list(node)
  while node
    puts node.id
    node = node.next
  end
end

print_list(first)
puts &quot;\n&quot;
print_list(reverse_list(first))
</code></pre></noscript></div>
</p>

<p>How would you do it? There&#39;s a really simple solution using a
<a href="https://gist.github.com/nhocki/4392454#comment-676651">stack</a>, but if you
find another one, I&#39;d love to hear about it on
<a href="https://twitter.com/nhocki">Twitter @nhocki</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Algorithms are on the cutting edge of entrepreneurship.]]></title>
    <link href="http://blog.nhocki.com/2011/11/09/algorithms-are-on-the-cutting-edge-of-entrepreneurship/"/>
    <updated>2011-11-09T00:00:00-05:00</updated>
    <id>http://blog.nhocki.com/2011/11/09/algorithms-are-on-the-cutting-edge-of-entrepreneurship</id>
    <content type="html"><![CDATA[<blockquote>
<p>Algorithms are on the cutting edge of entrepreneurship. If you&#39;re talking
about just re-implementing stuff that people did ten years ago, performance
isn&#39;t that important at some level. But, if you&#39;re talking about doing stuff
that nobody has done before, one of the reasons often that they haven&#39;t done
it is because it&#39;s too time-consuming.</p>
</blockquote>

<p>By Charles Leiserson</p>
]]></content>
  </entry>
  
</feed>
