<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: decorators | Nicolás Hock Isaza]]></title>
  <link href="http://blog.nhocki.com/blog/categories/decorators/atom.xml" rel="self"/>
  <link href="http://blog.nhocki.com/"/>
  <updated>2012-05-04T16:58:28-04:00</updated>
  <id>http://blog.nhocki.com/</id>
  <author>
    <name><![CDATA[Nicolás Hock Isaza]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Thoughts on Decorators & Presenters]]></title>
    <link href="http://blog.nhocki.com/2012/01/31/thoughts-on-decorators-and-presenters/"/>
    <updated>2012-01-31T18:12:00-05:00</updated>
    <id>http://blog.nhocki.com/2012/01/31/thoughts-on-decorators-and-presenters</id>
    <content type="html"><![CDATA[<p>I have been developing a new app using a lot of <a href="http://blog.nhocki.com/2012/01/10/simple-presenters--decorators-on-rails/">decorators and presenters</a>. I've been highly influenced by <a href="http://about.avdi.org/">Avdi</a> (both his <a href="http://avdi.org/devblog/">blog</a> and his <a href="http://avdi.org/devblog/2011/11/15/early-access-beta-of-objects-on-rails-now-available-2/">Objects in Rails book</a>) and <a href="http://steveklabnik.com">Steve Klabnik</a>, but now I have a problem. My decorators are starting to get big. I'll have to use <code>concerns</code> for that. Expect another post about it (maybe).</p>

<p><strong>I want to warn you that I am not by any means an expert on the subject. So I'm more than open to any feedback you can give me.</strong></p>

<blockquote><p>All presenters are decorators, but not all decorators are presenters.</p>

<p>A decorator is a class that adds some sort of functionality to another
class. A presenter is a class that adds some sort of presentation
formatting functionality to another class.</p>

<p><a href="https://groups.google.com/forum/#!msg/objects-on-rails/htAopf3k_dM/qJMq6QAfMvsJ">Steve Klabnik</a></p></blockquote>

<p>I think that what a decorator <em>should</em> do is give a standard API for the processed data stored somewhere (probably a database). I don't think a decorator should be in charge of the markup of the presented data. For me, it makes no sense that the decorator (that is processed data for me), knows <em>how</em> it is being shown to the user.</p>

<p>That said, I think the <strong>same</strong> decorator should be used to build the JSON response and the HTML response. The HTML markup and JSON structure are <em>just</em> \'markup\'. So, they can be treated as templates.</p>

<h3>So, where do the logic in the template goes?</h3>

<p>I had this discussion with a <a href="http://mheroin.com/">friend</a>, and he asked me that, with this approach, how would he add elements to a view depending on a condition, for example, the famous \'<strong><em>You are logged in as nhocki</em></strong>\' if there's a user logged in.</p>

<p>I think this should be created inside helper methods that takes a block. Inside that block you can use the <strong>decorator</strong> methods to show the needed data. You can use those methods in your JSON builder too (try out the new <a href="https://github.com/rails/jbuilder">Jbuilder</a>). You could bundle up these methods and re-use them in your projects too.</p>

<p>Here's an example:</p>

<p><div><script src='https://gist.github.com/1714913.js?file='></script>
<noscript><pre><code># app/models/user.rb
#
# User model has name &amp; username
#
# Only the username is required (signup with Github for example)
class User &lt; ActiveRecord::Base
  validates :username, presence: true
end



# app/decorators/user_decorator.rb
#
# Let's use the Draper gem for the decorators
class UserDecorator &lt; ApplicationDecorator
  decorates :user

  def display_name
    user.name.presence || user.username
  end

  # Formatting the data is OK. I'm against adding the markup
  def salary
    h.number_to_currency(user.salary)
  end
end


# app/views/users/index.html.erb

# current_user is a presenter
&lt;%= logged_in_area do %&gt;
  You are logged in as &lt;%= current_user.display_name %&gt;
&lt;% end %&gt;

# viewing @some_users's profile (which is also a presenter)
&lt;%= admin_area do %&gt;
  &lt;span class=&quot;salary&quot;&gt;&lt;%= @some_user.salary %&gt;&lt;/span&gt;
&lt;% end %&gt;


# app/helpers/application_helpers.rb
#
# We all hate helpers, but this time, they're useful.
def admin_area(&amp;block)
  content_tag :div, capture(&amp;block), class: 'admin'
end</code></pre></noscript></div>
</p>

<h3>Maybe I have the names wrong</h3>

<p>As I mentioned before, I'm no expert on design patterns. And I'm pretty <em>new</em> to presenters and decorators. So, maybe my approach has a different name. I don't really care how this is called, I feel it's a more natural approach and it keeps the template and the processed data in different parts.</p>

<h3>Please provide feedback</h3>

<p>It is also possible that I have it all wrong, that's why I'm really interested in your opinion. I'm eager to learn about everything from anyone, so I would love to have some feedback about this. You can post a comment below or send me a message on <a href="http://twitter.com/nhocki">twitter</a>.</p>
]]></content>
  </entry>
  
</feed>
