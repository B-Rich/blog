<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: ruby | Nicolás Hock Isaza]]></title>
  <link href="http://blog.nhocki.com/blog/categories/ruby/atom.xml" rel="self"/>
  <link href="http://blog.nhocki.com/"/>
  <updated>2013-02-05T14:58:34-05:00</updated>
  <id>http://blog.nhocki.com/</id>
  <author>
    <name><![CDATA[Nicolás Hock Isaza]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Stop using config files for secret data]]></title>
    <link href="http://blog.nhocki.com/2013/01/25/stop-using-config-files-for-secret-data/"/>
    <updated>2013-01-25T11:02:00-05:00</updated>
    <id>http://blog.nhocki.com/2013/01/25/stop-using-config-files-for-secret-data</id>
    <content type="html"><![CDATA[<p>Seriously, it&#39;s <strong>your</strong> fault that Github exposed your keys. If you want to
add everything to your repo (not that this is a good idea though), at least
make it private.</p>

<p>If you want to have <strong>per-environment variables, use the environment variables</strong>.
<em>But my development env would be full of crap!</em> some of you may cry... well,
there&#39;s a simple solution for that. Use <a href="https://github.com/bkeepers/dotenv">Dotenv</a>.</p>

<p>With <em>Dotenv</em> you only need to add a <code>.env</code> file to your application root directory
and you&#39;re done. Here&#39;s a quick example:</p>
<div class="highlight"><pre><code class="sh"><span class="c"># .env</span>
<span class="nv">S3_BUCKET</span><span class="o">=</span>some_development_bucket
<span class="nv">S3_SECRET</span><span class="o">=</span>a_secret_key
</code></pre>
</div>

<p>Then in your code, simply use <code>ENV[]</code> and be happy (and safe, but mostly happy)</p>
<div class="highlight"><pre><code class="ruby"><span class="c1"># some config file</span>
<span class="n">config</span><span class="o">.</span><span class="n">fog_directory</span>  <span class="o">=</span> <span class="no">ENV</span><span class="o">[</span><span class="s1">&#39;S3_BUCKET&#39;</span><span class="o">]</span>
</code></pre>
</div>

<p>And just like that, you can setup your server&#39;s config environments and not
worry about <em>supposed-to-be-private</em> public information.</p>

<p>One really cool thing about this is that this variables will only be loaded
in that specific application. It won&#39;t change <strong>your</strong> environment. So when
you stop the servers, your environment won&#39;t have the <code>.env</code> variables.</p>

<p>You can read more about <a href="http://opensoul.org/blog/archives/2012/07/24/dotenv/">Dotenv here</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Easily add versions to your Gemfile]]></title>
    <link href="http://blog.nhocki.com/2013/01/15/easily-add-versions-to-your-gemfile/"/>
    <updated>2013-01-15T22:31:00-05:00</updated>
    <id>http://blog.nhocki.com/2013/01/15/easily-add-versions-to-your-gemfile</id>
    <content type="html"><![CDATA[<p>Since <a href="http://gembundler.com/" title="Bundler">bundler</a> came out, managing dependencies
on ruby applications has been amazing. Combined with <a href="http://37signals.com/svn/posts/2998-setting-up-a-new-machine-for-ruby-development" title="37 Signals bootstrap script">some</a> <a href="http://zachholman.com/talk/unsucking-your-teams-development-environment/" title="Zach Holman&#39;s talk on development environment">bootstrap</a> <a href="http://ngauthier.com/2012/08/one-click-development.html" title="One click development">script</a>,
it&#39;s really easy to download some source code, install, and run an application.</p>

<p>There is still some room for improvement though. I&#39;ve always supported the use
of <a href="http://semver.org/" title="SemVer: Semantic Versioning">SemVer</a> and pessimistic locking (the <code>~&gt;</code>). This will allow you to
update applications without pain. And, with all this rails vulnerabilities,
you need just that.</p>

<p>But, since people don&#39;t always have the versions on their <code>Gemfile</code>, <a href="http://tenderlovemaking.com/2012/12/18/rails-4-and-your-gemfile.html" title="Rails 4 and your Gemfile">this can get
a little messy</a>. So, I&#39;ve created a simple gem to help you with that.</p>

<h3 id="toc_29">Welcome version_gemfile</h3>

<ul>
<li>1. Simply install it: <code>$ gem install version_gemfile</code></li>
<li>2. Go to your rails application: <code>$ cd ~/my/ruby/application</code></li>
<li>3. And add the versions to your <em>Gemfile</em>: <code>$ version_gemfile</code></li>
</ul>

<h2 id="toc_30">How does it work?</h2>

<p>This gem will go through each line in your <code>Gemfile</code> looking for dependencies
that have no versions. Then, will look into your <code>Gemfile.lock</code> for the version
you are currently using and add a pessimistic lock on that version.</p>

<p>The code can be found on <a href="https://github.com/nhocki/version_gemfile" title="Version Gemfile source code">Github</a>. If you have any problems, open an issue there
or ping me on <a href="https://twitter.com/nhocki" title="My twitter profile">Twitter</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Colorize your rake output]]></title>
    <link href="http://blog.nhocki.com/2011/11/30/colorize-your-rake-output/"/>
    <updated>2011-11-30T00:00:00-05:00</updated>
    <id>http://blog.nhocki.com/2011/11/30/colorize-your-rake-output</id>
    <content type="html"><![CDATA[<p>I&#39;ve been writing a lot of rake tasks lately. I like to have a lot of output (feedback) from my tasks, at least while I&#39;m writing them. I have colors in my tests, but my output is really ugly, so I took <a href="https://github.com/andmej/chatte/blob/master/client.rb#L15-24">some code</a> from <a href="https://github.com/andmej/chatte/">Chatte</a>, - a simple chat application a <a href="http://andr.esmejia.com/">friend</a> (and awesome <a href="https://github.com/andmej/">developer</a>, btw) wrote for college- and made some modifications for it. Here&#39;s my module right now…</p>

<p><div><script src='https://gist.github.com/1410582.js?file='></script>
<noscript><pre><code>module Colors
  def colorize(text, color_code)
    &quot;\033[#{color_code}m#{text}\033[0m&quot;
  end

  {
    :black    =&gt; 30,
    :red      =&gt; 31,
    :green    =&gt; 32,
    :yellow   =&gt; 33,
    :blue     =&gt; 34,
    :magenta  =&gt; 35,
    :cyan     =&gt; 36,
    :white    =&gt; 37
  }.each do |key, color_code|
    define_method key do |text|
      colorize(text, color_code)
    end
  end
end

# green &quot;Hello&quot;
#   =&gt; &quot;\e[32mHello\e[0m&quot;</code></pre></noscript></div>
</p>

<p>Now, you just need to <code>include Colors</code> in your tasks and enjoy your life.</p>

<p>I know there&#39;s a <a href="https://github.com/fazibear/colorize">colorize</a> gem out there, but I don&#39;t like their syntax. I prefer Andres&#39; approach much more, so maybe I&#39;ll turn this into a really simple gem. Do you think it&#39;s worth it?</p>
]]></content>
  </entry>
  
</feed>
