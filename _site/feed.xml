<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Nicolás Hock-Isaza</title>
    <author>Nicolás Hock-Isaza</authod>
    <description>Thoughts about programming, development &amp; other stuff.</description>
    <link>http://blog.nhocki.com/</link>
    <atom:link href="http://blog.nhocki.com/feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Tue, 17 Feb 2015 18:08:58 -0500</pubDate>
    <lastBuildDate>Tue, 17 Feb 2015 18:08:58 -0500</lastBuildDate>
    <generator>Jekyll v2.5.3</generator>
    
      <item>
        <title>Simplest Librato Metrics library</title>
        <description>&lt;p&gt;&lt;a href=&quot;https://www.librato.com/&quot;&gt;Librato&lt;/a&gt; is a great platform to track metrics and has a really simple
gem to track your &lt;a href=&quot;https://github.com/librato/librato-rack&quot;&gt;rack based apps&lt;/a&gt;, but what if yours is not one? And if
you&amp;#39;re on Heroku you can&amp;#39;t use &lt;a href=&quot;https://github.com/etsy/statsd/&quot;&gt;StatsD&lt;/a&gt;... So what do you do?&lt;/p&gt;

&lt;p&gt;It turns out that &lt;strong&gt;Librato can get metrics from the you application&amp;#39;s log&lt;/strong&gt; so by
&lt;a href=&quot;http://support.metrics.librato.com/knowledgebase/articles/265391-heroku-native-and-custom-metrics-without-the-libra&quot;&gt;adding a drain&lt;/a&gt; to your Heroku app you&amp;#39;ll have the simplest metrics
tracking library ever:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Metrics&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;increment&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;metric&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;amount&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;logger&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;info&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;count#&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;metric&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;amount&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;time&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;metric&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;**&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;options&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;block&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;block_given?&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;start_time&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Time&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;now&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;block&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;call&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;total&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Time&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;now&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;start_time&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1000&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;total&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;options&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:time&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;logger&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;info&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;measure#&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;metric&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;total&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;round&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;ms&amp;quot;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;total&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;gauge&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;metric&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;amount&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;logger&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;info&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;sample#&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;metric&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;amount&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;logger&lt;/span&gt;
    &lt;span class=&quot;vi&quot;&gt;@logger&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Logger&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;STDOUT&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
  &lt;span class=&quot;nb&quot;&gt;private_class_method&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:logger&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;And now getting metrics from your application is really, really simple:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;no&quot;&gt;Metrics&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;increment&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;shares&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;no&quot;&gt;Metrics&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;gauge&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;queue_size&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;no&quot;&gt;Metrics&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;time&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;expensive_operation&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# do some work }&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;You can check out all the things you can do with Librato and log metrics at the
&lt;a href=&quot;https://devcenter.heroku.com/articles/librato#custom-log-based-metrics&quot;&gt;Heroku DevCenter&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;metrics-in-your-logs&quot;&gt;Metrics in your logs&lt;/h2&gt;

&lt;p&gt;Probably the thing I like the most about this approach is having your metrics
in your application log waiting for them to be can be consumed and analyzed
from any service... &lt;strong&gt;Your application is a producer, Librato is
&lt;em&gt;just&lt;/em&gt; a consumer&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;You could add &lt;a href=&quot;http://www.elasticsearch.org/overview/kibana/&quot;&gt;Kibana&lt;/a&gt; with its powerful queries to get stuff out from
the metrics (and other data), or have multiple teams consume the metrics
and build different applications.&lt;/p&gt;

&lt;p&gt;Setting up alerts based on metrics becomes trivial with services like
&lt;a href=&quot;https://papertrailapp.com/&quot;&gt;Papertrail&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Bottom line, &lt;a href=&quot;http://engineering.linkedin.com/distributed-systems/log-what-every-software-engineer-should-know-about-real-time-datas-unifying&quot;&gt;logs are awesome&lt;/a&gt;, and &lt;strong&gt;you should take advantage of that&lt;/strong&gt;!&lt;/p&gt;
</description>
        <pubDate>Tue, 17 Feb 2015 11:27:00 -0500</pubDate>
        <link>http://blog.nhocki.com/2015/02/17/simplest-librato-metrics-library/</link>
        <guid isPermaLink="true">http://blog.nhocki.com/2015/02/17/simplest-librato-metrics-library/</guid>
        
        
      </item>
    
      <item>
        <title>Getting my Emacs config playing nice with Boxen</title>
        <description>&lt;p&gt;I&amp;#39;m moving all my development environment to &lt;a href=&quot;https://boxen.github.com&quot;&gt;Boxen&lt;/a&gt; and it&amp;#39;s been great,
but I have to admit I&amp;#39;ve had some problems configuring some of my stuff &lt;sup id=&quot;fnref1&quot;&gt;&lt;a href=&quot;#fn1&quot; rel=&quot;footnote&quot;&gt;1&lt;/a&gt;&lt;/sup&gt;.&lt;/p&gt;

&lt;p&gt;Here is how I got my &lt;a href=&quot;https://github.com/nhocki/dotemacs&quot;&gt;emacs config&lt;/a&gt; working (after fighting it for
over 2 hours!).&lt;/p&gt;

&lt;h2 id=&quot;cloning-my-config&quot;&gt;Cloning my config&lt;/h2&gt;

&lt;p&gt;Cloning the &lt;a href=&quot;https://github.com/nhocki/dotemacs&quot;&gt;repository&lt;/a&gt; was probably the easiest part, there are a lot
of manifests showing how to do this so I got this working pretty quickly:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-puppet&quot; data-lang=&quot;puppet&quot;&gt;&lt;span class=&quot;nv&quot;&gt;$emacs&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;${home}/src/emacsdotd&amp;quot;&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;file&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$emacs:&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;ensure&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;directory&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;na&quot;&gt;repository&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$emacs:&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;source&lt;/span&gt;  &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;#39;nhocki/dotemacs&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;require&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;File&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$emacs]&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;exec&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;pull emacs config&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;command&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;#39;git pull origin master&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;cwd&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$emacs&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This will create a directory at &lt;code&gt;~/src/emacsdotd&lt;/code&gt; and clone my &lt;a href=&quot;https://github.com/nhocki/dotemacs&quot;&gt;repo&lt;/a&gt;
there.&lt;/p&gt;

&lt;p&gt;The &lt;code&gt;require =&amp;gt; File[$emacs]&lt;/code&gt; attribute will let Puppet know that this block
can only be excecuted when the &lt;code&gt;$emacs&lt;/code&gt; one has finished (makes sure the directory
is created before cloning the repo).&lt;/p&gt;

&lt;h2 id=&quot;installing-cask&quot;&gt;Installing Cask&lt;/h2&gt;

&lt;p&gt;I use &lt;a href=&quot;https://github.com/cask/cask&quot;&gt;Cask&lt;/a&gt; to manage my emacs dependencies. The easiest way to install
it is &lt;a href=&quot;http://brew.sh/&quot;&gt;homebrew&lt;/a&gt;, so to install it within Boxen, I just needed to:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-puppet&quot; data-lang=&quot;puppet&quot;&gt;&lt;span class=&quot;k&quot;&gt;package&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;#39;cask&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;ensure&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;present&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;With Cask installed, I needed to make it work with my configuration.&lt;/p&gt;

&lt;p&gt;My &lt;code&gt;init.el&lt;/code&gt; file looks for the &lt;code&gt;cask.el&lt;/code&gt; file at &lt;code&gt;~/.cask/cask.el&lt;/code&gt; (the
default location) but since I installed Cask and Homebrew with Boxen it gets
was at &lt;code&gt;/opt/boxen/homebrew/opt/cask/&lt;/code&gt; which is kind of a weird place.&lt;/p&gt;

&lt;p&gt;So I needed to create a symlink between that folder and &lt;code&gt;~/.cask&lt;/code&gt;. For this
I added the following &lt;code&gt;file&lt;/code&gt; block:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-puppet&quot; data-lang=&quot;puppet&quot;&gt;&lt;span class=&quot;nv&quot;&gt;$homebrew&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;${boxen::config::home}/homebrew/opt&amp;quot;&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;file&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;${home}/.cask&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;ensure&lt;/span&gt;  &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;#39;link&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;target&lt;/span&gt;  &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;${homebrew}/cask&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;require&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;Package&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;#39;cask&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Notice that I needed the &lt;code&gt;require&lt;/code&gt; attribute to point to the package installation
so &lt;strong&gt;this block will only be executed when the Cask installation is finished&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;The &lt;code&gt;ensure =&amp;gt; &amp;#39;link&amp;#39;&lt;/code&gt; makes this &lt;code&gt;file&lt;/code&gt; block a symlink... Let&amp;#39;s talk about
this for a second.&lt;/p&gt;

&lt;h2 id=&quot;puppet-symlinks&quot;&gt;Puppet Symlinks&lt;/h2&gt;

&lt;p&gt;Let&amp;#39;s be clear, &lt;a href=&quot;http://www.puppetcookbook.com/posts/creating-a-symlink.html&quot;&gt;Puppet Symlinks&lt;/a&gt; are &lt;strong&gt;really fucked up&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;If you&amp;#39;re going to create a symbolic link between &lt;code&gt;&amp;lt;source_file&amp;gt;&lt;/code&gt; and
&lt;code&gt;&amp;lt;target_file&amp;gt;&lt;/code&gt; &lt;sup id=&quot;fnref2&quot;&gt;&lt;a href=&quot;#fn2&quot; rel=&quot;footnote&quot;&gt;2&lt;/a&gt;&lt;/sup&gt;, you would normally do &lt;code&gt;ln -s &amp;lt;source_file&amp;gt; &amp;lt;target_file&amp;gt;&lt;/code&gt;,
here&amp;#39;s the usage message from &lt;code&gt;ln&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;$ ln
usage: ln [-Ffhinsv] source_file [target_file]
       ln [-Ffhinsv] source_file ... target_dir
       link source_file target_file
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;But for some reason &lt;strong&gt;in Puppet the &lt;code&gt;target&lt;/code&gt; attribute is the &lt;code&gt;source_file&lt;/code&gt;&lt;/strong&gt;,
which honestly WHAT THE FUCK!&lt;/p&gt;

&lt;p&gt;We could use the &lt;em&gt;long&lt;/em&gt; syntax (where the block&amp;#39;s title is &lt;em&gt;not&lt;/em&gt; the &lt;code&gt;path&lt;/code&gt;) and it
is still &lt;strong&gt;very&lt;/strong&gt; confussing:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-puppet&quot; data-lang=&quot;puppet&quot;&gt;&lt;span class=&quot;k&quot;&gt;file&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;#39;create symlink&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;path&lt;/span&gt;   &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;target_file&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;target&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;source_file&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;ensure&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;#39;link&amp;#39;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;I don&amp;#39;t really know &lt;em&gt;why&lt;/em&gt; they named the &lt;code&gt;source_file&lt;/code&gt; &lt;em&gt;target&lt;/em&gt; when &lt;code&gt;target&lt;/code&gt; is the
name for the symlink in the actual &lt;code&gt;ln&lt;/code&gt; command. This is really confussing and I
lost a lot of time on this!&lt;/p&gt;

&lt;p&gt;Now that we know how to symlink stuff in Puppet, we can create the link for the
emacs configuration:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-puppet&quot; data-lang=&quot;puppet&quot;&gt;&lt;span class=&quot;k&quot;&gt;file&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;#39;create symlink&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;path&lt;/span&gt;   &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;${home}/.emacs.d&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;target&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$emacs,&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;ensure&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;#39;link&amp;#39;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This will create the &lt;code&gt;~/.emacs.d&lt;/code&gt; directory and point to the project (&lt;code&gt;~/src/emacsdotd&lt;/code&gt;).
Emacs will look for the &lt;code&gt;~/.emacs.d/init.el&lt;/code&gt; file by default.&lt;/p&gt;

&lt;h2 id=&quot;installing-the-dependencies&quot;&gt;Installing the dependencies&lt;/h2&gt;

&lt;p&gt;Now that we have a &lt;em&gt;kind-of-working&lt;/em&gt; installation and everything is in the right
place, we can install all the dependencies in the &lt;code&gt;Cask&lt;/code&gt; file.&lt;/p&gt;

&lt;p&gt;We need to make sure that the repo has been cloned, and for some reason this
command (&lt;code&gt;cask install&lt;/code&gt;) sometimes fails (can&amp;#39;t find some file - happens
randomly AFAIK), so we&amp;#39;ll need to be prepared for that:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-puppet&quot; data-lang=&quot;puppet&quot;&gt;&lt;span class=&quot;nv&quot;&gt;$emacsIns&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;pull emacs config&amp;quot;&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;exec&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;#39;install emacs dependencies with Cask&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;command&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;#39;cask install&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;cwd&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$emacs,&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;require&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;Exec&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$emacsIns],&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;tries&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;try_sleep&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This block will run &lt;code&gt;cask install&lt;/code&gt; in our repo directory and try at most 3 times.&lt;/p&gt;

&lt;p&gt;It will only run it once the &lt;code&gt;pull&lt;/code&gt; action has happened in the repo directory. This is
really important because if we run &lt;code&gt;cask install&lt;/code&gt; without a &lt;code&gt;Cask&lt;/code&gt; file, the command
will fail.&lt;/p&gt;

&lt;p&gt;It will also install or update automatically the dependencies if they ever change
in the Emacs repository, which is awesome.&lt;/p&gt;

&lt;p&gt;With all this I got my installation working and now I can run &lt;code&gt;boxen&lt;/code&gt; and have
everything configured.&lt;/p&gt;

&lt;h2 id=&quot;hope-this-helps&quot;&gt;Hope this helps&lt;/h2&gt;

&lt;p&gt;First of all, you can find the whole file &lt;a href=&quot;https://gist.github.com/nhocki/7744a6f939abd71880a9&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;I wrote this because I spent over 2 hours trying to figure out how to make this
works, hopefully you&amp;#39;ll find this and don&amp;#39;t go through the same pain I did,
specially with the symlinks.&lt;/p&gt;

&lt;p&gt;If for any reason you know &lt;strong&gt;why&lt;/strong&gt; Puppet chose to name &lt;code&gt;source&lt;/code&gt; as &lt;code&gt;target&lt;/code&gt; I
would really like to know, so please ping me on &lt;a href=&quot;https://twitter.com/nhocki&quot;&gt;Twitter&lt;/a&gt;.&lt;/p&gt;

&lt;div class=&quot;footnotes&quot;&gt;
&lt;hr&gt;
&lt;ol&gt;

&lt;li id=&quot;fn1&quot;&gt;
&lt;p&gt;Probably because I have no idea how to use Puppet well.&amp;nbsp;&lt;a href=&quot;#fnref1&quot; rev=&quot;footnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;

&lt;li id=&quot;fn2&quot;&gt;
&lt;p&gt;I did not came up with those names, those are the ones in the &lt;code&gt;ln&lt;/code&gt; documentation!&amp;nbsp;&lt;a href=&quot;#fnref2&quot; rev=&quot;footnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;

&lt;/ol&gt;
&lt;/div&gt;
</description>
        <pubDate>Thu, 11 Dec 2014 23:28:00 -0500</pubDate>
        <link>http://blog.nhocki.com/2014/12/11/getting-my-emacs-config-with-boxen/</link>
        <guid isPermaLink="true">http://blog.nhocki.com/2014/12/11/getting-my-emacs-config-with-boxen/</guid>
        
        
      </item>
    
      <item>
        <title>Displaying deploys with Capistrano and Graphite</title>
        <description>&lt;p&gt;At &lt;a href=&quot;http://weheartit.com&quot;&gt;We Heart It&lt;/a&gt;, we collect a lot of data in several graphs &amp;amp; dashboars.
But the graph data alone might not always be enough, sometimes you need context about
what actually changed to know why the graph changed (like a big change on response times).&lt;/p&gt;

&lt;p&gt;Thankfuly, Graphite now supports &lt;em&gt;&lt;a href=&quot;https://code.launchpad.net/%7Elucio.torre/graphite/add-events/+merge/69142&quot;&gt;events&lt;/a&gt;&lt;/em&gt; (although is not very well documented),
so it&amp;#39;s actually really easy to display when the code was deployed and add some information
about the deploy itself.&lt;/p&gt;

&lt;p&gt;We use &lt;a href=&quot;http://grafana.org/&quot;&gt;Graphana&lt;/a&gt; for most of our dashboards. It is an
amazing graphing tool, that gets data from &lt;a href=&quot;http://graphite.wikidot.com/&quot;&gt;Graphite&lt;/a&gt;
and displays it in a really nice way. You should really try it.&lt;/p&gt;

&lt;h2 id=&quot;the-basics&quot;&gt;The Basics&lt;/h2&gt;

&lt;p&gt;First we need to create an event. This is easily done by &lt;code&gt;POST&lt;/code&gt;ing some simple JSON:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-sh&quot; data-lang=&quot;sh&quot;&gt;curl -X POST http://graphite.example.com/events -d &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
&lt;span class=&quot;s1&quot;&gt;&amp;#39;{&amp;quot;what&amp;quot;: &amp;quot;Code deploy&amp;quot;, &amp;quot;tags&amp;quot;: &amp;quot;rails-deploy&amp;quot;, data: &amp;quot;commit information&amp;quot;}&amp;#39;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Then we need to enable &lt;a href=&quot;http://grafana.org/docs/features/annotations/&quot;&gt;Graphana annotations&lt;/a&gt; and display the &lt;code&gt;rails-deploy&lt;/code&gt;
tag on our dashboard. The result will look like this:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://blog.nhocki.com/assets/deploy_events.png&quot; alt=&quot;Deploy Events&quot;&gt;&lt;/p&gt;

&lt;h2 id=&quot;using-capistrano&quot;&gt;Using Capistrano&lt;/h2&gt;

&lt;p&gt;Since we use Capistrano to deploy our apps, we can automatically create deploy
events every time a deploy finishes, here&amp;#39;s our task:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;n&quot;&gt;after&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;deploy&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;graphite:mark_deploy&amp;quot;&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;namespace&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:graphite&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;task&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:mark_deploy&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;commit_information&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;sb&quot;&gt;`git log -n 1 --pretty=format:&amp;#39;%h - %s - %an&amp;#39; --abbrev-commit`&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;auth&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;username&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;foo&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;password&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;bar&amp;quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;body&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;ss&quot;&gt;what&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;rails code deployed.&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
      &lt;span class=&quot;ss&quot;&gt;tags&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;rails-deploy&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
      &lt;span class=&quot;ss&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fetch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:branch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt; deployed at &lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Time&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;now&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt; ( &lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;commit_information&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt; )&amp;quot;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;no&quot;&gt;HTTParty&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;post&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;https://graphite.example.com/events/&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;basic_auth&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;auth&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;body&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;body&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;to_json&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;nb&quot;&gt;puts&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;Deploy sent to Graphite.&amp;quot;&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The &lt;code&gt;commit_information&lt;/code&gt; information will give you something like this:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;68305ff - Allow wildcard increment/decrement on stats counters. - Nicolás Hock Isaza
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;You can use this information as a starting point when things go wrong with a
deploy.&lt;/p&gt;

&lt;p&gt;This is a very easy thing to add and gives you a lot of extra context around your
graphs, I found it really useful when we added it for the first time (and use it
a lot today as well).&lt;/p&gt;
</description>
        <pubDate>Sat, 06 Dec 2014 18:51:00 -0500</pubDate>
        <link>http://blog.nhocki.com/2014/12/06/displaying-deploys-with-capistrano-and-graphite/</link>
        <guid isPermaLink="true">http://blog.nhocki.com/2014/12/06/displaying-deploys-with-capistrano-and-graphite/</guid>
        
        
      </item>
    
      <item>
        <title>Trending Content with Ruby and Redis</title>
        <description>&lt;p&gt;I&amp;#39;ve released a new gem called &lt;a href=&quot;https://github.com/nhocki/popular_streams&quot;&gt;Popular Streams&lt;/a&gt;, with this gem you can easily
get &amp;quot;trending&amp;quot; content based on events. It is based on a really nice &lt;a href=&quot;http://stdout.heyzap.com/2013/04/08/surfacing-interesting-content/&quot;&gt;blog post&lt;/a&gt;
by Micah Fivecoate on Heyzap. There are several implementations in that post, you
should check it out.&lt;/p&gt;

&lt;p&gt;The gem is really easy to use and has a nice README on how to do it, so I won&amp;#39;t get
into a lot of details on &lt;strong&gt;how&lt;/strong&gt; to use it here. This post is mostly about &lt;strong&gt;why&lt;/strong&gt;
the gem works (and a little bit of the math behind it). The source is on
&lt;a href=&quot;https://github.com/nhocki/popular_streams&quot;&gt;GitHub&lt;/a&gt; if you want to look at it.&lt;/p&gt;

&lt;h2 id=&quot;how-it-works?-and-why?&quot;&gt;How it works? And why?&lt;/h2&gt;

&lt;p&gt;So, what&amp;#39;s popular &lt;em&gt;right now&lt;/em&gt;?. For example, at &lt;a href=&quot;http://weheartit.com&quot;&gt;We Heart It&lt;/a&gt; people &lt;em&gt;heart&lt;/em&gt;
images that inspire them, and they do that &lt;em&gt;a lot&lt;/em&gt;. We get around 13 million hearts
per day. The trick about popularity is that it will &lt;a href=&quot;http://en.wikipedia.org/wiki/Exponential_decay&quot;&gt;decay over time&lt;/a&gt;. This means
that an image that was &lt;em&gt;hearted&lt;/em&gt; 10 times week ago is less popular than an image
that was hearted 6 times today. Imagine each heart being a vote on an image.&lt;/p&gt;

&lt;p&gt;The way the algorithm works is that, every day, we&amp;#39;ll divide the weight for each
vote by half. Going through all the hearts is obviously impossible for us, but
luckily there&amp;#39;s a formula to know the score of a specific vote on a specific time.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://blog.nhocki.com/assets/half_life.png&quot; alt=&quot;Half Life&quot;&gt;&lt;/p&gt;

&lt;p&gt;Now the tricky part is knowing what time &lt;code&gt;t&lt;/code&gt; we&amp;#39;re at. But if we fixate the starting
time (&lt;code&gt;epoc&lt;/code&gt;) and we compare everything against that, we can just get the value of
the vote at &lt;code&gt;epoc&lt;/code&gt;:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://blog.nhocki.com/assets/half_life_epoc.png&quot; alt=&quot;Half Life at Epoc&quot;&gt;&lt;/p&gt;

&lt;p&gt;That value is what this specific vote will be worth at &lt;code&gt;epoc&lt;/code&gt;. So now our problem
becomes really easy! Every time an image gets a vote, we add that value to the
score of that image (at &lt;code&gt;epoc&lt;/code&gt;).&lt;/p&gt;

&lt;p&gt;At first we will add &lt;strong&gt;really&lt;/strong&gt; small values, but it doesn&amp;#39;t matter because all
values will be small. And they will get bigger and bigger over time, but they will
all getbigger in the same proportion. This is pretty awesome and that&amp;#39;s what made
me chose Micha&amp;#39;s solution.&lt;/p&gt;

&lt;p&gt;One problem with the gem is when &lt;code&gt;epoc&lt;/code&gt; is much smaller than &lt;code&gt;t&lt;/code&gt;, so the value we
will add is really big and we might get an overflow, but we can control that a
little bit by selecting a nice &lt;code&gt;epoc&lt;/code&gt; and a nice &lt;code&gt;half_life&lt;/code&gt;. With the ones that
the gem has by default, it should be OK for about 5 years, so I&amp;#39;m not really worried
about that right now.&lt;/p&gt;

&lt;h2 id=&quot;how-to-i-use-it?&quot;&gt;How to I use it?&lt;/h2&gt;

&lt;p&gt;Here&amp;#39;s a simple example on how to use the gem to get the popular tags of a site.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;n&quot;&gt;stream&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;PopularStream&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;popular_tags&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;stream&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;vote&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;field&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;rubygems&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;# You can also add an optional `weight` param.&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;stream&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;vote&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;field&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;ruby&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;weight&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;# And you can even specify when the event happened.&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;# Notice that time is a number, meaning seconds since Epoc.&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;time&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Date&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;yesterday&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;to_time&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;stream&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;vote&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;field&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;rubygems&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;time&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;time&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;to_i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;stream&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;get&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# =&amp;gt; [&amp;#39;rubygems&amp;#39;, &amp;#39;ruby&amp;#39;]&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;# You can pass `limit` and `offset`&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;stream&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;limit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;offset&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# =&amp;gt; [&amp;#39;ruby&amp;#39;]&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;stream&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;offset&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# =&amp;gt; []&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;# You can ask to get the scores as well&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;stream&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;with_scores&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kp&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# =&amp;gt; [[&amp;#39;ruby&amp;#39;, 0.00001]]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Really easy, right? So go, checkout the gem and let me know what content you
start surfacing!&lt;/p&gt;
</description>
        <pubDate>Tue, 02 Dec 2014 22:28:00 -0500</pubDate>
        <link>http://blog.nhocki.com/2014/12/02/trending-content-with-ruby-and-redis/</link>
        <guid isPermaLink="true">http://blog.nhocki.com/2014/12/02/trending-content-with-ruby-and-redis/</guid>
        
        
        <category>ruby</category>
        
        <category>redis</category>
        
      </item>
    
      <item>
        <title>Tower of Hanoi with a stack</title>
        <description>&lt;p&gt;I&amp;#39;ve recently subscribed to &lt;a href=&quot;http://codingforinterviews.com/&quot;&gt;Coding for Interviews&lt;/a&gt;
and received my first email today. The content is great and you should join.
Even if you&amp;#39;re not looking for a job, it&amp;#39;s a short read with nice topics to
refresh your memory.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://us2.campaign-archive2.com/?u=cadc6c448cd083a0aeed7f864&amp;amp;id=c550bc59d5&amp;amp;e=5694567579&quot;&gt;Today&amp;#39;s assignment&lt;/a&gt; was with stacks. I&amp;#39;ve used stacks to
&lt;a href=&quot;http://blog.nhocki.com/2012/12/27/reverse-a-list-in-o-n/&quot;&gt;reverse a list in O(n)&lt;/a&gt;
but today&amp;#39;s challenge was to solve the &lt;a href=&quot;http://en.wikipedia.org/wiki/Tower_of_Hanoi&quot;&gt;Tower of Hanoi&lt;/a&gt; problem without
recursion.&lt;/p&gt;

&lt;p&gt;Here&amp;#39;s my solution:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;c1&quot;&gt;# https://gist.github.com/nhocki/4716874&lt;/span&gt;

&lt;span class=&quot;no&quot;&gt;Hanoi&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Struct&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:disk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:source&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:dest&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:spare&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;move&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;hanoi&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;s2&quot;&gt;&amp;quot;Move &lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;hanoi&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;disk&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;abs&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt; from &lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;hanoi&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;source&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt; to &lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;hanoi&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dest&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Stack&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;initialize&lt;/span&gt;
    &lt;span class=&quot;vi&quot;&gt;@data&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[]&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;push&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;hanoi&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;vi&quot;&gt;@data&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;unshift&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;hanoi&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;pop&lt;/span&gt;
    &lt;span class=&quot;vi&quot;&gt;@data&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;shift&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;peek&lt;/span&gt;
    &lt;span class=&quot;vi&quot;&gt;@data&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;first&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;empty?&lt;/span&gt;
    &lt;span class=&quot;vi&quot;&gt;@data&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;empty?&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;


&lt;span class=&quot;c1&quot;&gt;# Resolve the Tower of Hanoi problem with a Stack. You can&amp;#39;t use recursion&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;# in it&amp;#39;s traditional way, but adding everything to a stack works the same.&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;#&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;# Notice you have to invert the order of the calls to the recursive function&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;# since the stack is **Last In - First Out**.&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;stacker&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;hanoi&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;stack&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Stack&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;new&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;stack&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;push&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;hanoi&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;until&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;stack&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;empty?&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;hanoi&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;stack&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pop&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;hanoi&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;disk&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;
      &lt;span class=&quot;nb&quot;&gt;puts&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;move&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;hanoi&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;left&lt;/span&gt;  &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Hanoi&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;hanoi&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;disk&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;hanoi&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;source&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;hanoi&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;spare&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;hanoi&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dest&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;right&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Hanoi&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;hanoi&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;disk&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;hanoi&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;spare&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;hanoi&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dest&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;hanoi&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;source&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;hanoi&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;disk&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;hanoi&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;disk&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# force printing it next time it appears&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;stack&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;push&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;right&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;stack&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;push&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;hanoi&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;stack&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;push&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;left&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;


&lt;span class=&quot;c1&quot;&gt;# Resolve the Tower of Hanoi problem with recursion.&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;recursive&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;hanoi&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;hanoi&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;disk&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;
    &lt;span class=&quot;nb&quot;&gt;puts&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;move&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;hanoi&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;left&lt;/span&gt;  &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Hanoi&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;hanoi&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;disk&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;hanoi&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;source&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;hanoi&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;spare&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;hanoi&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dest&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;right&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Hanoi&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;hanoi&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;disk&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;hanoi&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;spare&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;hanoi&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dest&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;hanoi&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;source&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;recursive&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;left&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;nb&quot;&gt;puts&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;move&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;hanoi&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;recursive&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;right&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;h&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Hanoi&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;A&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;B&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;C&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;recursive&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;h&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;puts&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n\n&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;stacker&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;h&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;There&amp;#39;s another iterative solution but I haven&amp;#39;t implemented it. So, if you did
or have some other way to solve this, I&amp;#39;d love to know on
&lt;a href=&quot;https://twitter.com/nhocki&quot;&gt;Twitter @nhocki&lt;/a&gt;&lt;/p&gt;
</description>
        <pubDate>Tue, 05 Feb 2013 14:37:00 -0500</pubDate>
        <link>http://blog.nhocki.com/2013/02/05/tower-of-hanoi-with-a-stack/</link>
        <guid isPermaLink="true">http://blog.nhocki.com/2013/02/05/tower-of-hanoi-with-a-stack/</guid>
        
        
        <category>algorithms</category>
        
        <category>programming</category>
        
        <category>interview tips</category>
        
      </item>
    
      <item>
        <title>Stop using config files for secret data</title>
        <description>&lt;p&gt;Seriously, it&amp;#39;s &lt;strong&gt;your&lt;/strong&gt; fault that GitHub exposed your keys. If you want to
add everything to your repo (not that this is a good idea though), at least
make it private.&lt;/p&gt;

&lt;p&gt;If you want to have &lt;strong&gt;per-environment variables, use the environment variables&lt;/strong&gt;.
&lt;em&gt;But my development env would be full of crap!&lt;/em&gt; some of you may cry... well,
there&amp;#39;s a simple solution for that. Use &lt;a href=&quot;https://github.com/bkeepers/dotenv&quot;&gt;Dotenv&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;With &lt;em&gt;Dotenv&lt;/em&gt; you only need to add a &lt;code&gt;.env&lt;/code&gt; file to your application root directory
and you&amp;#39;re done. Here&amp;#39;s a quick example:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-sh&quot; data-lang=&quot;sh&quot;&gt;&lt;span class=&quot;c&quot;&gt;# .env&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;S3_BUCKET&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;some_development_bucket
&lt;span class=&quot;nv&quot;&gt;S3_SECRET&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;a_secret_key
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Then in your code, simply use &lt;code&gt;ENV[]&lt;/code&gt; and be happy (and safe, but mostly happy)&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;c1&quot;&gt;# some config file&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;config&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fog_directory&lt;/span&gt;  &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;ENV&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;S3_BUCKET&amp;#39;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;And just like that, you can setup your server&amp;#39;s config environments and not
worry about &lt;em&gt;supposed-to-be-private&lt;/em&gt; public information.&lt;/p&gt;

&lt;p&gt;One really cool thing about this is that this variables will only be loaded
in that specific application. It won&amp;#39;t change &lt;strong&gt;your&lt;/strong&gt; environment. So when
you stop the servers, your environment won&amp;#39;t have the &lt;code&gt;.env&lt;/code&gt; variables.&lt;/p&gt;

&lt;p&gt;You can read more about &lt;a href=&quot;http://opensoul.org/blog/archives/2012/07/24/dotenv/&quot;&gt;Dotenv here&lt;/a&gt;.&lt;/p&gt;
</description>
        <pubDate>Fri, 25 Jan 2013 11:02:00 -0500</pubDate>
        <link>http://blog.nhocki.com/2013/01/25/stop-using-config-files-for-secret-data/</link>
        <guid isPermaLink="true">http://blog.nhocki.com/2013/01/25/stop-using-config-files-for-secret-data/</guid>
        
        
        <category>ruby</category>
        
        <category>gems</category>
        
      </item>
    
      <item>
        <title>Easily add versions to your Gemfile</title>
        <description>&lt;p&gt;Since &lt;a href=&quot;http://gembundler.com/&quot; title=&quot;Bundler&quot;&gt;bundler&lt;/a&gt; came out, managing dependencies
on ruby applications has been amazing. Combined with &lt;a href=&quot;http://37signals.com/svn/posts/2998-setting-up-a-new-machine-for-ruby-development&quot; title=&quot;37 Signals bootstrap script&quot;&gt;some&lt;/a&gt; &lt;a href=&quot;http://zachholman.com/talk/unsucking-your-teams-development-environment/&quot; title=&quot;Zach Holman&amp;#39;s talk on development environment&quot;&gt;bootstrap&lt;/a&gt; &lt;a href=&quot;http://ngauthier.com/2012/08/one-click-development.html&quot; title=&quot;One click development&quot;&gt;script&lt;/a&gt;,
it&amp;#39;s really easy to download some source code, install, and run an application.&lt;/p&gt;

&lt;p&gt;There is still some room for improvement though. I&amp;#39;ve always supported the use
of &lt;a href=&quot;http://semver.org/&quot; title=&quot;SemVer: Semantic Versioning&quot;&gt;SemVer&lt;/a&gt; and pessimistic locking (the &lt;code&gt;~&amp;gt;&lt;/code&gt;). This will allow you to
update applications without pain. And, with all this rails vulnerabilities,
you need just that.&lt;/p&gt;

&lt;p&gt;But, since people don&amp;#39;t always have the versions on their &lt;code&gt;Gemfile&lt;/code&gt;, &lt;a href=&quot;http://tenderlovemaking.com/2012/12/18/rails-4-and-your-gemfile.html&quot; title=&quot;Rails 4 and your Gemfile&quot;&gt;this can get
a little messy&lt;/a&gt;. So, I&amp;#39;ve created a simple gem to help you with that.&lt;/p&gt;

&lt;h3 id=&quot;welcome-version_gemfile&quot;&gt;Welcome version_gemfile&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;1. Simply install it: &lt;code&gt;$ gem install version_gemfile&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;2. Go to your rails application: &lt;code&gt;$ cd ~/my/ruby/application&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;3. And add the versions to your &lt;em&gt;Gemfile&lt;/em&gt;: &lt;code&gt;$ version_gemfile&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;how-does-it-work?&quot;&gt;How does it work?&lt;/h2&gt;

&lt;p&gt;This gem will go through each line in your &lt;code&gt;Gemfile&lt;/code&gt; looking for dependencies
that have no versions. Then, will look into your &lt;code&gt;Gemfile.lock&lt;/code&gt; for the version
you are currently using and add a pessimistic lock on that version.&lt;/p&gt;

&lt;p&gt;The code can be found on &lt;a href=&quot;https://github.com/nhocki/version_gemfile&quot; title=&quot;Version Gemfile source code&quot;&gt;Github&lt;/a&gt;. If you have any problems, open an issue there
or ping me on &lt;a href=&quot;https://twitter.com/nhocki&quot; title=&quot;My twitter profile&quot;&gt;Twitter&lt;/a&gt;.&lt;/p&gt;
</description>
        <pubDate>Tue, 15 Jan 2013 22:31:00 -0500</pubDate>
        <link>http://blog.nhocki.com/2013/01/15/easily-add-versions-to-your-gemfile/</link>
        <guid isPermaLink="true">http://blog.nhocki.com/2013/01/15/easily-add-versions-to-your-gemfile/</guid>
        
        
        <category>ruby</category>
        
        <category>bundler</category>
        
      </item>
    
      <item>
        <title>Reverse a list in O(n)</title>
        <description>&lt;p&gt;For about a year, I&amp;#39;ve always had a question I ask someone I&amp;#39;m interviewing for
a programming position. I&amp;#39;ve asked this around 3 times and got some nice
answers, but I had never implemented it. The question is really simple:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Given a linked list, how would you reverse it in &lt;code&gt;O(n)&lt;/code&gt;?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Here&amp;#39;s my solution:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;c1&quot;&gt;# https://gist.github.com/nhocki/4392454&lt;/span&gt;

&lt;span class=&quot;no&quot;&gt;Node&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Struct&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:next&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;# Build the list&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;first&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Node&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kp&quot;&gt;nil&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;nodes&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;times&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Node&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kp&quot;&gt;nil&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)}&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;nodes&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;each_with_index&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;node&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;index&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;node&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;next&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;nodes&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;index&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;first&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;next&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;nodes&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;first&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;reverse_list&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;node&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;prox&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;node&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;next&lt;/span&gt;  &lt;span class=&quot;c1&quot;&gt;# Get the next node on the list.&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;node&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;next&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kp&quot;&gt;nil&lt;/span&gt;   &lt;span class=&quot;c1&quot;&gt;# Make the new tail point to nil (end of the new list).&lt;/span&gt;

  &lt;span class=&quot;n&quot;&gt;last&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;node&lt;/span&gt;       &lt;span class=&quot;c1&quot;&gt;# Save that new tail on a tmp variable (to point to it later)&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;node&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;prox&lt;/span&gt;       &lt;span class=&quot;c1&quot;&gt;# Change the `current` node to the `next` one. Move ahead.&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;node&lt;/span&gt;          &lt;span class=&quot;c1&quot;&gt;# If I&amp;#39;m not at the end of the list.&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;prox&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;node&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;next&lt;/span&gt;  &lt;span class=&quot;c1&quot;&gt;# Save the next node on the original list.&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;node&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;next&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;last&lt;/span&gt;  &lt;span class=&quot;c1&quot;&gt;# Reverse the list (point back from `current`)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;last&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;node&lt;/span&gt;       &lt;span class=&quot;c1&quot;&gt;# Save the current node to point later.&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;node&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;prox&lt;/span&gt;       &lt;span class=&quot;c1&quot;&gt;# Move ahead once.&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;last&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;print_list&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;node&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;node&lt;/span&gt;
    &lt;span class=&quot;nb&quot;&gt;puts&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;node&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;id&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;node&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;node&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;next&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;print_list&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;first&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;puts&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;print_list&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;reverse_list&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;first&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;How would you do it? There&amp;#39;s a really simple solution using a
&lt;a href=&quot;https://gist.github.com/nhocki/4392454#comment-676651&quot;&gt;stack&lt;/a&gt;, but if you
find another one, I&amp;#39;d love to hear about it on
&lt;a href=&quot;https://twitter.com/nhocki&quot;&gt;Twitter @nhocki&lt;/a&gt;&lt;/p&gt;
</description>
        <pubDate>Thu, 27 Dec 2012 16:53:00 -0500</pubDate>
        <link>http://blog.nhocki.com/2012/12/27/reverse-a-list-in-o-n/</link>
        <guid isPermaLink="true">http://blog.nhocki.com/2012/12/27/reverse-a-list-in-o-n/</guid>
        
        
        <category>programming</category>
        
        <category>algorithms</category>
        
      </item>
    
      <item>
        <title>Using Liquid `include` with DB templates</title>
        <description>&lt;p&gt;I am working on a new application that will use some &lt;a href=&quot;http://liquidmarkup.org/&quot; title=&quot;Liquid Markup&quot;&gt;Liquid&lt;/a&gt; templates to
allow our clients to edit some templates.&lt;/p&gt;

&lt;p&gt;We will store these templates in the Database, load them, parse them and render
them. So far, no magic.&lt;/p&gt;

&lt;p&gt;But, I needed to have some &amp;quot;partials&amp;quot; for these. I wanted some common elements
(like image galleries) to be available for the client to use in that specific
template.&lt;/p&gt;

&lt;p&gt;The way you normally accomplish this is by using an &lt;code&gt;include&lt;/code&gt; tag, but I needed
a little bit more control. Not all the clients will have the same partials and
I also wanted the clients to be able to edit these partials.&lt;/p&gt;

&lt;p&gt;So after reading the &lt;a href=&quot;https://github.com/Shopify/liquid/blob/master/lib/liquid/tags/include.rb#L49-61&quot; title=&quot;Liquid include source code&quot;&gt;Liquid source code&lt;/a&gt;, I found a really easy way to do
this.&lt;/p&gt;

&lt;p&gt;You just need an object that responds to &lt;code&gt;read_template_file&lt;/code&gt; and it can take
1 or 2 arguments (please, go for 2). This method must return the Liquid &lt;strong&gt;source&lt;/strong&gt;
of the partial (not a parsed template).&lt;/p&gt;

&lt;p&gt;So, here&amp;#39;s a really simple one that will work:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;c1&quot;&gt;# https://gist.github.com/nhocki/3645632&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;# Class to be used as a Liquid File System for the `include` tag&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;LiquidTemplateSystem&lt;/span&gt;
  &lt;span class=&quot;kp&quot;&gt;attr_reader&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:user&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;initialize&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;user&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;vi&quot;&gt;@user&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;user&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

  &lt;span class=&quot;c1&quot;&gt;# Return a valid liquid template string&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;read_template_file&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;template_path&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;context&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;user&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;partials&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;find_by_name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;template_path&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;liquid_source&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;


&lt;span class=&quot;c1&quot;&gt;# In the view:&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;# This `template` has an {% include %} tag.&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;&amp;lt;%=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;template&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;render&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;obj&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;registers&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;file_system&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;LiquidTemplateSystem&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;user&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)})&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;%&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id=&quot;default-filesystem&quot;&gt;Default FileSystem&lt;/h2&gt;

&lt;p&gt;You could also set the default &lt;code&gt;FileSystem&lt;/code&gt; with
&lt;code&gt;Liquid::Template.file_system = MyNewFileSystem.new&lt;/code&gt;. This may be useful if you
want the partials to be shared on the database but not different for every user.&lt;/p&gt;

&lt;h2 id=&quot;any-other-way?&quot;&gt;Any other way?&lt;/h2&gt;

&lt;p&gt;Even though I find this to be &lt;em&gt;really&lt;/em&gt; easy, another way may exist. If you know
of a better way to do this, please &lt;a href=&quot;https://twitter.com/nhocki&quot;&gt;let me know&lt;/a&gt;.&lt;/p&gt;
</description>
        <pubDate>Wed, 05 Sep 2012 17:37:00 -0500</pubDate>
        <link>http://blog.nhocki.com/2012/09/05/using-liquid-include-with-db-templates/</link>
        <guid isPermaLink="true">http://blog.nhocki.com/2012/09/05/using-liquid-include-with-db-templates/</guid>
        
        
        <category>rails</category>
        
        <category>liquid</category>
        
        <category>rails views</category>
        
      </item>
    
      <item>
        <title>Seriously just do it</title>
        <description>&lt;p&gt;I have finished my first &amp;quot;working season&amp;quot; at &lt;a href=&quot;http://mit.edu&quot;&gt;MIT&lt;/a&gt;. I got here
on October 4. It&amp;#39;s been an amazing and weird journey.&lt;/p&gt;

&lt;p&gt;But I have to admit that at first I was a bad employee. I was &lt;strong&gt;really&lt;/strong&gt; used
to have somebody telling me what to do all the time. When I arrived at MIT that
didn&amp;#39;t happen. &lt;strong&gt;At all&lt;/strong&gt;. I was given some &amp;quot;long term&amp;quot; tasks and that was it.
I just had to do them.&lt;/p&gt;

&lt;p&gt;Since no one was all over me checking my progress or asking me how I was
doing on everything, I was waisting a lot (&lt;em&gt;most&lt;/em&gt;) of my time.
&lt;a href=&quot;http://www.espndeportes.com&quot;&gt;ESPNDeportes&lt;/a&gt; got a lot of visits from me.
I started using Facebook on regular basis. &lt;a href=&quot;http://www.threadless.com&quot;&gt;Threadless&lt;/a&gt;
didn&amp;#39;t have enough T-shirts for me. &lt;a href=&quot;http://twitter.com/nhocki&quot;&gt;Twitter&lt;/a&gt; was
not &amp;quot;real time enough&amp;quot;...&lt;/p&gt;

&lt;p&gt;But, with time, I started working and I can&amp;#39;t say how grateful I am for &lt;a href=&quot;http://tomayko.com/writings/management-style&quot;&gt;this
way of managing&lt;/a&gt;. I&amp;#39;ve learned
to be much more productive on my own. To manage my time. To be much more
responsible. But, I guess the best thing about this was that I learned that
you just need to &lt;strong&gt;shut up, close all the meaningless things you have open and
get shit done&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Sure, if you need help, ask. If what you&amp;#39;re doing is wrong, try again. But you
won&amp;#39;t know something doesn&amp;#39;t work if it&amp;#39;s just an idea.&lt;/p&gt;

&lt;p&gt;I became much more productive in everything. Not only MIT work stuff. Personal
(disposable) things I wanted to try.
&lt;a href=&quot;http://shop.oreilly.com/product/0636920021810.do&quot;&gt;Things&lt;/a&gt; I wanted to learn.
&lt;a href=&quot;http://shop.oreilly.com/product/0636920019664.do&quot;&gt;Things I&lt;/a&gt;
&lt;a href=&quot;http://designinghypermediaapis.com/&quot;&gt;wanted&lt;/a&gt; &lt;a href=&quot;http://objectsonrails.com/&quot;&gt;to&lt;/a&gt;
&lt;a href=&quot;http://pragprog.com/book/warv/the-rails-view&quot;&gt;read&lt;/a&gt; (even my
&lt;a href=&quot;http://instapaper.com&quot;&gt;Instapaper&lt;/a&gt; queue went down. By a lot!).&lt;/p&gt;

&lt;p&gt;So, just try it out. It may take more than a week to get used to it, but just
try it. &lt;strong&gt;Close this post and every other distracting thing and do something&lt;/strong&gt;.&lt;/p&gt;
</description>
        <pubDate>Thu, 26 Jul 2012 01:07:00 -0500</pubDate>
        <link>http://blog.nhocki.com/2012/07/26/seriously-just-do-it/</link>
        <guid isPermaLink="true">http://blog.nhocki.com/2012/07/26/seriously-just-do-it/</guid>
        
        
        <category>mit</category>
        
        <category>random thoughts</category>
        
        <category>management</category>
        
      </item>
    
  </channel>
</rss>
